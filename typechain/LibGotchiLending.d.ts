/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LibGotchiLendingInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "GotchiLendingAdd(uint32)": EventFragment;
    "GotchiLendingAdded(uint32,address,uint32,uint96,uint32,uint8[3],address,address,uint32,address[],uint256)": EventFragment;
    "GotchiLendingCancel(uint32,uint256)": EventFragment;
    "GotchiLendingCanceled(uint32,address,uint32,uint96,uint32,uint8[3],address,address,uint32,address[],uint256)": EventFragment;
    "GotchiLendingClaim(uint32,address[],uint256[])": EventFragment;
    "GotchiLendingClaimed(uint32,address,address,uint32,uint96,uint32,uint8[3],address,address,uint32,address[],uint256[],uint256)": EventFragment;
    "GotchiLendingEnd(uint32)": EventFragment;
    "GotchiLendingEnded(uint32,address,address,uint32,uint96,uint32,uint8[3],address,address,uint32,address[],uint256)": EventFragment;
    "GotchiLendingExecute(uint32)": EventFragment;
    "GotchiLendingExecuted(uint32,address,address,uint32,uint96,uint32,uint8[3],address,address,uint32,address[],uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GotchiLendingAdd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GotchiLendingAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GotchiLendingCancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GotchiLendingCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GotchiLendingClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GotchiLendingClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GotchiLendingEnd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GotchiLendingEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GotchiLendingExecute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GotchiLendingExecuted"): EventFragment;
}

export type GotchiLendingAddEvent = TypedEvent<
  [number] & { listingId: number }
>;

export type GotchiLendingAddedEvent = TypedEvent<
  [
    number,
    string,
    number,
    BigNumber,
    number,
    [number, number, number],
    string,
    string,
    number,
    string[],
    BigNumber
  ] & {
    listingId: number;
    lender: string;
    tokenId: number;
    initialCost: BigNumber;
    period: number;
    revenueSplit: [number, number, number];
    originalOwner: string;
    thirdParty: string;
    whitelistId: number;
    revenueTokens: string[];
    timeCreated: BigNumber;
  }
>;

export type GotchiLendingCancelEvent = TypedEvent<
  [number, BigNumber] & { listingId: number; time: BigNumber }
>;

export type GotchiLendingCanceledEvent = TypedEvent<
  [
    number,
    string,
    number,
    BigNumber,
    number,
    [number, number, number],
    string,
    string,
    number,
    string[],
    BigNumber
  ] & {
    listingId: number;
    lender: string;
    tokenId: number;
    initialCost: BigNumber;
    period: number;
    revenueSplit: [number, number, number];
    originalOwner: string;
    thirdParty: string;
    whitelistId: number;
    revenueTokens: string[];
    timeCanceled: BigNumber;
  }
>;

export type GotchiLendingClaimEvent = TypedEvent<
  [number, string[], BigNumber[]] & {
    listingId: number;
    tokenAddresses: string[];
    amounts: BigNumber[];
  }
>;

export type GotchiLendingClaimedEvent = TypedEvent<
  [
    number,
    string,
    string,
    number,
    BigNumber,
    number,
    [number, number, number],
    string,
    string,
    number,
    string[],
    BigNumber[],
    BigNumber
  ] & {
    listingId: number;
    lender: string;
    borrower: string;
    tokenId: number;
    initialCost: BigNumber;
    period: number;
    revenueSplit: [number, number, number];
    originalOwner: string;
    thirdParty: string;
    whitelistId: number;
    revenueTokens: string[];
    amounts: BigNumber[];
    timeClaimed: BigNumber;
  }
>;

export type GotchiLendingEndEvent = TypedEvent<
  [number] & { listingId: number }
>;

export type GotchiLendingEndedEvent = TypedEvent<
  [
    number,
    string,
    string,
    number,
    BigNumber,
    number,
    [number, number, number],
    string,
    string,
    number,
    string[],
    BigNumber
  ] & {
    listingId: number;
    lender: string;
    borrower: string;
    tokenId: number;
    initialCost: BigNumber;
    period: number;
    revenueSplit: [number, number, number];
    originalOwner: string;
    thirdParty: string;
    whitelistId: number;
    revenueTokens: string[];
    timeEnded: BigNumber;
  }
>;

export type GotchiLendingExecuteEvent = TypedEvent<
  [number] & { listingId: number }
>;

export type GotchiLendingExecutedEvent = TypedEvent<
  [
    number,
    string,
    string,
    number,
    BigNumber,
    number,
    [number, number, number],
    string,
    string,
    number,
    string[],
    BigNumber
  ] & {
    listingId: number;
    lender: string;
    borrower: string;
    tokenId: number;
    initialCost: BigNumber;
    period: number;
    revenueSplit: [number, number, number];
    originalOwner: string;
    thirdParty: string;
    whitelistId: number;
    revenueTokens: string[];
    timeAgreed: BigNumber;
  }
>;

export class LibGotchiLending extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LibGotchiLendingInterface;

  functions: {};

  callStatic: {};

  filters: {
    "GotchiLendingAdd(uint32)"(
      listingId?: BigNumberish | null
    ): TypedEventFilter<[number], { listingId: number }>;

    GotchiLendingAdd(
      listingId?: BigNumberish | null
    ): TypedEventFilter<[number], { listingId: number }>;

    "GotchiLendingAdded(uint32,address,uint32,uint96,uint32,uint8[3],address,address,uint32,address[],uint256)"(
      listingId?: BigNumberish | null,
      lender?: string | null,
      tokenId?: BigNumberish | null,
      initialCost?: null,
      period?: null,
      revenueSplit?: null,
      originalOwner?: null,
      thirdParty?: null,
      whitelistId?: null,
      revenueTokens?: null,
      timeCreated?: null
    ): TypedEventFilter<
      [
        number,
        string,
        number,
        BigNumber,
        number,
        [number, number, number],
        string,
        string,
        number,
        string[],
        BigNumber
      ],
      {
        listingId: number;
        lender: string;
        tokenId: number;
        initialCost: BigNumber;
        period: number;
        revenueSplit: [number, number, number];
        originalOwner: string;
        thirdParty: string;
        whitelistId: number;
        revenueTokens: string[];
        timeCreated: BigNumber;
      }
    >;

    GotchiLendingAdded(
      listingId?: BigNumberish | null,
      lender?: string | null,
      tokenId?: BigNumberish | null,
      initialCost?: null,
      period?: null,
      revenueSplit?: null,
      originalOwner?: null,
      thirdParty?: null,
      whitelistId?: null,
      revenueTokens?: null,
      timeCreated?: null
    ): TypedEventFilter<
      [
        number,
        string,
        number,
        BigNumber,
        number,
        [number, number, number],
        string,
        string,
        number,
        string[],
        BigNumber
      ],
      {
        listingId: number;
        lender: string;
        tokenId: number;
        initialCost: BigNumber;
        period: number;
        revenueSplit: [number, number, number];
        originalOwner: string;
        thirdParty: string;
        whitelistId: number;
        revenueTokens: string[];
        timeCreated: BigNumber;
      }
    >;

    "GotchiLendingCancel(uint32,uint256)"(
      listingId?: BigNumberish | null,
      time?: null
    ): TypedEventFilter<
      [number, BigNumber],
      { listingId: number; time: BigNumber }
    >;

    GotchiLendingCancel(
      listingId?: BigNumberish | null,
      time?: null
    ): TypedEventFilter<
      [number, BigNumber],
      { listingId: number; time: BigNumber }
    >;

    "GotchiLendingCanceled(uint32,address,uint32,uint96,uint32,uint8[3],address,address,uint32,address[],uint256)"(
      listingId?: BigNumberish | null,
      lender?: string | null,
      tokenId?: BigNumberish | null,
      initialCost?: null,
      period?: null,
      revenueSplit?: null,
      originalOwner?: null,
      thirdParty?: null,
      whitelistId?: null,
      revenueTokens?: null,
      timeCanceled?: null
    ): TypedEventFilter<
      [
        number,
        string,
        number,
        BigNumber,
        number,
        [number, number, number],
        string,
        string,
        number,
        string[],
        BigNumber
      ],
      {
        listingId: number;
        lender: string;
        tokenId: number;
        initialCost: BigNumber;
        period: number;
        revenueSplit: [number, number, number];
        originalOwner: string;
        thirdParty: string;
        whitelistId: number;
        revenueTokens: string[];
        timeCanceled: BigNumber;
      }
    >;

    GotchiLendingCanceled(
      listingId?: BigNumberish | null,
      lender?: string | null,
      tokenId?: BigNumberish | null,
      initialCost?: null,
      period?: null,
      revenueSplit?: null,
      originalOwner?: null,
      thirdParty?: null,
      whitelistId?: null,
      revenueTokens?: null,
      timeCanceled?: null
    ): TypedEventFilter<
      [
        number,
        string,
        number,
        BigNumber,
        number,
        [number, number, number],
        string,
        string,
        number,
        string[],
        BigNumber
      ],
      {
        listingId: number;
        lender: string;
        tokenId: number;
        initialCost: BigNumber;
        period: number;
        revenueSplit: [number, number, number];
        originalOwner: string;
        thirdParty: string;
        whitelistId: number;
        revenueTokens: string[];
        timeCanceled: BigNumber;
      }
    >;

    "GotchiLendingClaim(uint32,address[],uint256[])"(
      listingId?: BigNumberish | null,
      tokenAddresses?: null,
      amounts?: null
    ): TypedEventFilter<
      [number, string[], BigNumber[]],
      { listingId: number; tokenAddresses: string[]; amounts: BigNumber[] }
    >;

    GotchiLendingClaim(
      listingId?: BigNumberish | null,
      tokenAddresses?: null,
      amounts?: null
    ): TypedEventFilter<
      [number, string[], BigNumber[]],
      { listingId: number; tokenAddresses: string[]; amounts: BigNumber[] }
    >;

    "GotchiLendingClaimed(uint32,address,address,uint32,uint96,uint32,uint8[3],address,address,uint32,address[],uint256[],uint256)"(
      listingId?: BigNumberish | null,
      lender?: string | null,
      borrower?: string | null,
      tokenId?: null,
      initialCost?: null,
      period?: null,
      revenueSplit?: null,
      originalOwner?: null,
      thirdParty?: null,
      whitelistId?: null,
      revenueTokens?: null,
      amounts?: null,
      timeClaimed?: null
    ): TypedEventFilter<
      [
        number,
        string,
        string,
        number,
        BigNumber,
        number,
        [number, number, number],
        string,
        string,
        number,
        string[],
        BigNumber[],
        BigNumber
      ],
      {
        listingId: number;
        lender: string;
        borrower: string;
        tokenId: number;
        initialCost: BigNumber;
        period: number;
        revenueSplit: [number, number, number];
        originalOwner: string;
        thirdParty: string;
        whitelistId: number;
        revenueTokens: string[];
        amounts: BigNumber[];
        timeClaimed: BigNumber;
      }
    >;

    GotchiLendingClaimed(
      listingId?: BigNumberish | null,
      lender?: string | null,
      borrower?: string | null,
      tokenId?: null,
      initialCost?: null,
      period?: null,
      revenueSplit?: null,
      originalOwner?: null,
      thirdParty?: null,
      whitelistId?: null,
      revenueTokens?: null,
      amounts?: null,
      timeClaimed?: null
    ): TypedEventFilter<
      [
        number,
        string,
        string,
        number,
        BigNumber,
        number,
        [number, number, number],
        string,
        string,
        number,
        string[],
        BigNumber[],
        BigNumber
      ],
      {
        listingId: number;
        lender: string;
        borrower: string;
        tokenId: number;
        initialCost: BigNumber;
        period: number;
        revenueSplit: [number, number, number];
        originalOwner: string;
        thirdParty: string;
        whitelistId: number;
        revenueTokens: string[];
        amounts: BigNumber[];
        timeClaimed: BigNumber;
      }
    >;

    "GotchiLendingEnd(uint32)"(
      listingId?: BigNumberish | null
    ): TypedEventFilter<[number], { listingId: number }>;

    GotchiLendingEnd(
      listingId?: BigNumberish | null
    ): TypedEventFilter<[number], { listingId: number }>;

    "GotchiLendingEnded(uint32,address,address,uint32,uint96,uint32,uint8[3],address,address,uint32,address[],uint256)"(
      listingId?: BigNumberish | null,
      lender?: string | null,
      borrower?: string | null,
      tokenId?: null,
      initialCost?: null,
      period?: null,
      revenueSplit?: null,
      originalOwner?: null,
      thirdParty?: null,
      whitelistId?: null,
      revenueTokens?: null,
      timeEnded?: null
    ): TypedEventFilter<
      [
        number,
        string,
        string,
        number,
        BigNumber,
        number,
        [number, number, number],
        string,
        string,
        number,
        string[],
        BigNumber
      ],
      {
        listingId: number;
        lender: string;
        borrower: string;
        tokenId: number;
        initialCost: BigNumber;
        period: number;
        revenueSplit: [number, number, number];
        originalOwner: string;
        thirdParty: string;
        whitelistId: number;
        revenueTokens: string[];
        timeEnded: BigNumber;
      }
    >;

    GotchiLendingEnded(
      listingId?: BigNumberish | null,
      lender?: string | null,
      borrower?: string | null,
      tokenId?: null,
      initialCost?: null,
      period?: null,
      revenueSplit?: null,
      originalOwner?: null,
      thirdParty?: null,
      whitelistId?: null,
      revenueTokens?: null,
      timeEnded?: null
    ): TypedEventFilter<
      [
        number,
        string,
        string,
        number,
        BigNumber,
        number,
        [number, number, number],
        string,
        string,
        number,
        string[],
        BigNumber
      ],
      {
        listingId: number;
        lender: string;
        borrower: string;
        tokenId: number;
        initialCost: BigNumber;
        period: number;
        revenueSplit: [number, number, number];
        originalOwner: string;
        thirdParty: string;
        whitelistId: number;
        revenueTokens: string[];
        timeEnded: BigNumber;
      }
    >;

    "GotchiLendingExecute(uint32)"(
      listingId?: BigNumberish | null
    ): TypedEventFilter<[number], { listingId: number }>;

    GotchiLendingExecute(
      listingId?: BigNumberish | null
    ): TypedEventFilter<[number], { listingId: number }>;

    "GotchiLendingExecuted(uint32,address,address,uint32,uint96,uint32,uint8[3],address,address,uint32,address[],uint256)"(
      listingId?: BigNumberish | null,
      lender?: string | null,
      borrower?: string | null,
      tokenId?: null,
      initialCost?: null,
      period?: null,
      revenueSplit?: null,
      originalOwner?: null,
      thirdParty?: null,
      whitelistId?: null,
      revenueTokens?: null,
      timeAgreed?: null
    ): TypedEventFilter<
      [
        number,
        string,
        string,
        number,
        BigNumber,
        number,
        [number, number, number],
        string,
        string,
        number,
        string[],
        BigNumber
      ],
      {
        listingId: number;
        lender: string;
        borrower: string;
        tokenId: number;
        initialCost: BigNumber;
        period: number;
        revenueSplit: [number, number, number];
        originalOwner: string;
        thirdParty: string;
        whitelistId: number;
        revenueTokens: string[];
        timeAgreed: BigNumber;
      }
    >;

    GotchiLendingExecuted(
      listingId?: BigNumberish | null,
      lender?: string | null,
      borrower?: string | null,
      tokenId?: null,
      initialCost?: null,
      period?: null,
      revenueSplit?: null,
      originalOwner?: null,
      thirdParty?: null,
      whitelistId?: null,
      revenueTokens?: null,
      timeAgreed?: null
    ): TypedEventFilter<
      [
        number,
        string,
        string,
        number,
        BigNumber,
        number,
        [number, number, number],
        string,
        string,
        number,
        string[],
        BigNumber
      ],
      {
        listingId: number;
        lender: string;
        borrower: string;
        tokenId: number;
        initialCost: BigNumber;
        period: number;
        revenueSplit: [number, number, number];
        originalOwner: string;
        thirdParty: string;
        whitelistId: number;
        revenueTokens: string[];
        timeAgreed: BigNumber;
      }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
