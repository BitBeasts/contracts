/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { LibWhitelist, LibWhitelistInterface } from "../LibWhitelist";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint32",
        name: "whitelistId",
        type: "uint32",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "actionRight",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "accessRight",
        type: "uint256",
      },
    ],
    name: "WhitelistAccessRightSet",
    type: "event",
  },
];

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122065f2939e8ccd0d3d53709757dc9a6fedd54ff9e325deb4f0e14b595df31d110564736f6c63430008010033";

export class LibWhitelist__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LibWhitelist> {
    return super.deploy(overrides || {}) as Promise<LibWhitelist>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LibWhitelist {
    return super.attach(address) as LibWhitelist;
  }
  connect(signer: Signer): LibWhitelist__factory {
    return super.connect(signer) as LibWhitelist__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibWhitelistInterface {
    return new utils.Interface(_abi) as LibWhitelistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibWhitelist {
    return new Contract(address, _abi, signerOrProvider) as LibWhitelist;
  }
}
