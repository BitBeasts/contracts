/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RafflesContractInterface extends ethers.utils.Interface {
  functions: {
    "changeVRF(uint256,bytes32,address,address)": FunctionFragment;
    "changeVRFFee(uint256,bytes32)": FunctionFragment;
    "claimPrize(uint256,address,tuple[])": FunctionFragment;
    "drawRandomNumber(uint256)": FunctionFragment;
    "drawRandomNumberTest(uint256)": FunctionFragment;
    "enterTickets(uint256,tuple[])": FunctionFragment;
    "getEntrants(uint256)": FunctionFragment;
    "getEntries(uint256,address)": FunctionFragment;
    "getRaffles()": FunctionFragment;
    "linkBalance()": FunctionFragment;
    "nonces(bytes32)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "raffleInfo(uint256)": FunctionFragment;
    "raffleSupply()": FunctionFragment;
    "rawFulfillRandomness(bytes32,uint256)": FunctionFragment;
    "removeLinkTokens(address,uint256)": FunctionFragment;
    "startRaffle(uint256,tuple[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "ticketStats(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "changeVRF",
    values: [BigNumberish, BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeVRFFee",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPrize",
    values: [
      BigNumberish,
      string,
      {
        entryIndex: BigNumberish;
        prizes: {
          raffleItemPrizeIndex: BigNumberish;
          winningPrizeNumbers: BigNumberish[];
        }[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "drawRandomNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "drawRandomNumberTest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enterTickets",
    values: [
      BigNumberish,
      {
        ticketAddress: string;
        ticketId: BigNumberish;
        ticketQuantity: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntrants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntries",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRaffles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "linkBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "raffleInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "raffleSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomness",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLinkTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startRaffle",
    values: [
      BigNumberish,
      {
        ticketAddress: string;
        ticketId: BigNumberish;
        raffleItemPrizes: {
          prizeAddress: string;
          prizeId: BigNumberish;
          prizeQuantity: BigNumberish;
        }[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "changeVRF", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeVRFFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimPrize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "drawRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drawRandomNumberTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntrants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEntries", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRaffles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "linkBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "raffleInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "raffleSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLinkTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RaffleClaimPrize(uint256,address,address,uint256,uint256)": EventFragment;
    "RaffleRandomNumber(uint256,uint256)": EventFragment;
    "RaffleStarted(uint256,uint256,tuple[])": EventFragment;
    "RaffleTicketsEntered(uint256,address,tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RaffleClaimPrize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RaffleRandomNumber"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RaffleStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RaffleTicketsEntered"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RaffleClaimPrizeEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber] & {
    raffleId: BigNumber;
    entrant: string;
    prizeAddress: string;
    prizeId: BigNumber;
    prizeQuantity: BigNumber;
  }
>;

export type RaffleRandomNumberEvent = TypedEvent<
  [BigNumber, BigNumber] & { raffleId: BigNumber; randomNumber: BigNumber }
>;

export type RaffleStartedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    ([
      string,
      BigNumber,
      ([string, BigNumber, BigNumber] & {
        prizeAddress: string;
        prizeId: BigNumber;
        prizeQuantity: BigNumber;
      })[]
    ] & {
      ticketAddress: string;
      ticketId: BigNumber;
      raffleItemPrizes: ([string, BigNumber, BigNumber] & {
        prizeAddress: string;
        prizeId: BigNumber;
        prizeQuantity: BigNumber;
      })[];
    })[]
  ] & {
    raffleId: BigNumber;
    raffleEnd: BigNumber;
    raffleItems: ([
      string,
      BigNumber,
      ([string, BigNumber, BigNumber] & {
        prizeAddress: string;
        prizeId: BigNumber;
        prizeQuantity: BigNumber;
      })[]
    ] & {
      ticketAddress: string;
      ticketId: BigNumber;
      raffleItemPrizes: ([string, BigNumber, BigNumber] & {
        prizeAddress: string;
        prizeId: BigNumber;
        prizeQuantity: BigNumber;
      })[];
    })[];
  }
>;

export type RaffleTicketsEnteredEvent = TypedEvent<
  [
    BigNumber,
    string,
    ([string, BigNumber, BigNumber] & {
      ticketAddress: string;
      ticketId: BigNumber;
      ticketQuantity: BigNumber;
    })[]
  ] & {
    raffleId: BigNumber;
    entrant: string;
    ticketItems: ([string, BigNumber, BigNumber] & {
      ticketAddress: string;
      ticketId: BigNumber;
      ticketQuantity: BigNumber;
    })[];
  }
>;

export class RafflesContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RafflesContractInterface;

  functions: {
    changeVRF(
      _newFee: BigNumberish,
      _keyHash: BytesLike,
      _vrfCoordinator: string,
      _link: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeVRFFee(
      _newFee: BigNumberish,
      _keyHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimPrize(
      _raffleId: BigNumberish,
      _entrant: string,
      _wins: {
        entryIndex: BigNumberish;
        prizes: {
          raffleItemPrizeIndex: BigNumberish;
          winningPrizeNumbers: BigNumberish[];
        }[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    drawRandomNumber(
      _raffleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    drawRandomNumberTest(
      _raffleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enterTickets(
      _raffleId: BigNumberish,
      _ticketItems: {
        ticketAddress: string;
        ticketId: BigNumberish;
        ticketQuantity: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getEntrants(
      _raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { entrants_: string[] }>;

    getEntries(
      _raffleId: BigNumberish,
      _entrant: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          ticketAddress: string;
          ticketId: BigNumber;
          ticketQuantity: BigNumber;
          rangeStart: BigNumber;
          rangeEnd: BigNumber;
          raffleItemIndex: BigNumber;
          prizesClaimed: boolean;
        })[]
      ] & {
        entries_: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          ticketAddress: string;
          ticketId: BigNumber;
          ticketQuantity: BigNumber;
          rangeStart: BigNumber;
          rangeEnd: BigNumber;
          raffleItemIndex: BigNumber;
          prizesClaimed: boolean;
        })[];
      }
    >;

    getRaffles(
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, boolean] & {
          raffleId: BigNumber;
          raffleEnd: BigNumber;
          isOpen: boolean;
        })[]
      ] & {
        raffles_: ([BigNumber, BigNumber, boolean] & {
          raffleId: BigNumber;
          raffleEnd: BigNumber;
          isOpen: boolean;
        })[];
      }
    >;

    linkBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { linkBalance_: BigNumber }>;

    nonces(
      _keyHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce_: BigNumber }>;

    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    raffleInfo(
      _raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        ([
          string,
          BigNumber,
          BigNumber,
          ([string, BigNumber, BigNumber] & {
            prizeAddress: string;
            prizeId: BigNumber;
            prizeQuantity: BigNumber;
          })[]
        ] & {
          ticketAddress: string;
          ticketId: BigNumber;
          totalEntered: BigNumber;
          raffleItemPrizes: ([string, BigNumber, BigNumber] & {
            prizeAddress: string;
            prizeId: BigNumber;
            prizeQuantity: BigNumber;
          })[];
        })[],
        BigNumber
      ] & {
        raffleEnd_: BigNumber;
        raffleItems_: ([
          string,
          BigNumber,
          BigNumber,
          ([string, BigNumber, BigNumber] & {
            prizeAddress: string;
            prizeId: BigNumber;
            prizeQuantity: BigNumber;
          })[]
        ] & {
          ticketAddress: string;
          ticketId: BigNumber;
          totalEntered: BigNumber;
          raffleItemPrizes: ([string, BigNumber, BigNumber] & {
            prizeAddress: string;
            prizeId: BigNumber;
            prizeQuantity: BigNumber;
          })[];
        })[];
        randomNumber_: BigNumber;
      }
    >;

    raffleSupply(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { raffleSupply_: BigNumber }>;

    rawFulfillRandomness(
      _requestId: BytesLike,
      _randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLinkTokens(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startRaffle(
      _raffleDuration: BigNumberish,
      _raffleItems: {
        ticketAddress: string;
        ticketId: BigNumberish;
        raffleItemPrizes: {
          prizeAddress: string;
          prizeId: BigNumberish;
          prizeQuantity: BigNumberish;
        }[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ticketStats(
      _raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, BigNumber] & {
          ticketAddress: string;
          ticketId: BigNumber;
          numberOfEntrants: BigNumber;
          totalEntered: BigNumber;
        })[]
      ] & {
        ticketStats_: ([string, BigNumber, BigNumber, BigNumber] & {
          ticketAddress: string;
          ticketId: BigNumber;
          numberOfEntrants: BigNumber;
          totalEntered: BigNumber;
        })[];
      }
    >;

    transferOwnership(
      _newContractOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  changeVRF(
    _newFee: BigNumberish,
    _keyHash: BytesLike,
    _vrfCoordinator: string,
    _link: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeVRFFee(
    _newFee: BigNumberish,
    _keyHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimPrize(
    _raffleId: BigNumberish,
    _entrant: string,
    _wins: {
      entryIndex: BigNumberish;
      prizes: {
        raffleItemPrizeIndex: BigNumberish;
        winningPrizeNumbers: BigNumberish[];
      }[];
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  drawRandomNumber(
    _raffleId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  drawRandomNumberTest(
    _raffleId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enterTickets(
    _raffleId: BigNumberish,
    _ticketItems: {
      ticketAddress: string;
      ticketId: BigNumberish;
      ticketQuantity: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getEntrants(
    _raffleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getEntries(
    _raffleId: BigNumberish,
    _entrant: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      ticketAddress: string;
      ticketId: BigNumber;
      ticketQuantity: BigNumber;
      rangeStart: BigNumber;
      rangeEnd: BigNumber;
      raffleItemIndex: BigNumber;
      prizesClaimed: boolean;
    })[]
  >;

  getRaffles(
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, boolean] & {
      raffleId: BigNumber;
      raffleEnd: BigNumber;
      isOpen: boolean;
    })[]
  >;

  linkBalance(overrides?: CallOverrides): Promise<BigNumber>;

  nonces(_keyHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  onERC1155Received(
    _operator: string,
    _from: string,
    _id: BigNumberish,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  raffleInfo(
    _raffleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      ([
        string,
        BigNumber,
        BigNumber,
        ([string, BigNumber, BigNumber] & {
          prizeAddress: string;
          prizeId: BigNumber;
          prizeQuantity: BigNumber;
        })[]
      ] & {
        ticketAddress: string;
        ticketId: BigNumber;
        totalEntered: BigNumber;
        raffleItemPrizes: ([string, BigNumber, BigNumber] & {
          prizeAddress: string;
          prizeId: BigNumber;
          prizeQuantity: BigNumber;
        })[];
      })[],
      BigNumber
    ] & {
      raffleEnd_: BigNumber;
      raffleItems_: ([
        string,
        BigNumber,
        BigNumber,
        ([string, BigNumber, BigNumber] & {
          prizeAddress: string;
          prizeId: BigNumber;
          prizeQuantity: BigNumber;
        })[]
      ] & {
        ticketAddress: string;
        ticketId: BigNumber;
        totalEntered: BigNumber;
        raffleItemPrizes: ([string, BigNumber, BigNumber] & {
          prizeAddress: string;
          prizeId: BigNumber;
          prizeQuantity: BigNumber;
        })[];
      })[];
      randomNumber_: BigNumber;
    }
  >;

  raffleSupply(overrides?: CallOverrides): Promise<BigNumber>;

  rawFulfillRandomness(
    _requestId: BytesLike,
    _randomness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLinkTokens(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startRaffle(
    _raffleDuration: BigNumberish,
    _raffleItems: {
      ticketAddress: string;
      ticketId: BigNumberish;
      raffleItemPrizes: {
        prizeAddress: string;
        prizeId: BigNumberish;
        prizeQuantity: BigNumberish;
      }[];
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ticketStats(
    _raffleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, BigNumber] & {
      ticketAddress: string;
      ticketId: BigNumber;
      numberOfEntrants: BigNumber;
      totalEntered: BigNumber;
    })[]
  >;

  transferOwnership(
    _newContractOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    changeVRF(
      _newFee: BigNumberish,
      _keyHash: BytesLike,
      _vrfCoordinator: string,
      _link: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeVRFFee(
      _newFee: BigNumberish,
      _keyHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    claimPrize(
      _raffleId: BigNumberish,
      _entrant: string,
      _wins: {
        entryIndex: BigNumberish;
        prizes: {
          raffleItemPrizeIndex: BigNumberish;
          winningPrizeNumbers: BigNumberish[];
        }[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    drawRandomNumber(
      _raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    drawRandomNumberTest(
      _raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    enterTickets(
      _raffleId: BigNumberish,
      _ticketItems: {
        ticketAddress: string;
        ticketId: BigNumberish;
        ticketQuantity: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    getEntrants(
      _raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getEntries(
      _raffleId: BigNumberish,
      _entrant: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        ticketAddress: string;
        ticketId: BigNumber;
        ticketQuantity: BigNumber;
        rangeStart: BigNumber;
        rangeEnd: BigNumber;
        raffleItemIndex: BigNumber;
        prizesClaimed: boolean;
      })[]
    >;

    getRaffles(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, boolean] & {
        raffleId: BigNumber;
        raffleEnd: BigNumber;
        isOpen: boolean;
      })[]
    >;

    linkBalance(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(_keyHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    raffleInfo(
      _raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        ([
          string,
          BigNumber,
          BigNumber,
          ([string, BigNumber, BigNumber] & {
            prizeAddress: string;
            prizeId: BigNumber;
            prizeQuantity: BigNumber;
          })[]
        ] & {
          ticketAddress: string;
          ticketId: BigNumber;
          totalEntered: BigNumber;
          raffleItemPrizes: ([string, BigNumber, BigNumber] & {
            prizeAddress: string;
            prizeId: BigNumber;
            prizeQuantity: BigNumber;
          })[];
        })[],
        BigNumber
      ] & {
        raffleEnd_: BigNumber;
        raffleItems_: ([
          string,
          BigNumber,
          BigNumber,
          ([string, BigNumber, BigNumber] & {
            prizeAddress: string;
            prizeId: BigNumber;
            prizeQuantity: BigNumber;
          })[]
        ] & {
          ticketAddress: string;
          ticketId: BigNumber;
          totalEntered: BigNumber;
          raffleItemPrizes: ([string, BigNumber, BigNumber] & {
            prizeAddress: string;
            prizeId: BigNumber;
            prizeQuantity: BigNumber;
          })[];
        })[];
        randomNumber_: BigNumber;
      }
    >;

    raffleSupply(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomness(
      _requestId: BytesLike,
      _randomness: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLinkTokens(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startRaffle(
      _raffleDuration: BigNumberish,
      _raffleItems: {
        ticketAddress: string;
        ticketId: BigNumberish;
        raffleItemPrizes: {
          prizeAddress: string;
          prizeId: BigNumberish;
          prizeQuantity: BigNumberish;
        }[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ticketStats(
      _raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber] & {
        ticketAddress: string;
        ticketId: BigNumber;
        numberOfEntrants: BigNumber;
        totalEntered: BigNumber;
      })[]
    >;

    transferOwnership(
      _newContractOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RaffleClaimPrize(uint256,address,address,uint256,uint256)"(
      raffleId?: BigNumberish | null,
      entrant?: null,
      prizeAddress?: null,
      prizeId?: null,
      prizeQuantity?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        raffleId: BigNumber;
        entrant: string;
        prizeAddress: string;
        prizeId: BigNumber;
        prizeQuantity: BigNumber;
      }
    >;

    RaffleClaimPrize(
      raffleId?: BigNumberish | null,
      entrant?: null,
      prizeAddress?: null,
      prizeId?: null,
      prizeQuantity?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        raffleId: BigNumber;
        entrant: string;
        prizeAddress: string;
        prizeId: BigNumber;
        prizeQuantity: BigNumber;
      }
    >;

    "RaffleRandomNumber(uint256,uint256)"(
      raffleId?: BigNumberish | null,
      randomNumber?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { raffleId: BigNumber; randomNumber: BigNumber }
    >;

    RaffleRandomNumber(
      raffleId?: BigNumberish | null,
      randomNumber?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { raffleId: BigNumber; randomNumber: BigNumber }
    >;

    "RaffleStarted(uint256,uint256,tuple[])"(
      raffleId?: BigNumberish | null,
      raffleEnd?: null,
      raffleItems?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        ([
          string,
          BigNumber,
          ([string, BigNumber, BigNumber] & {
            prizeAddress: string;
            prizeId: BigNumber;
            prizeQuantity: BigNumber;
          })[]
        ] & {
          ticketAddress: string;
          ticketId: BigNumber;
          raffleItemPrizes: ([string, BigNumber, BigNumber] & {
            prizeAddress: string;
            prizeId: BigNumber;
            prizeQuantity: BigNumber;
          })[];
        })[]
      ],
      {
        raffleId: BigNumber;
        raffleEnd: BigNumber;
        raffleItems: ([
          string,
          BigNumber,
          ([string, BigNumber, BigNumber] & {
            prizeAddress: string;
            prizeId: BigNumber;
            prizeQuantity: BigNumber;
          })[]
        ] & {
          ticketAddress: string;
          ticketId: BigNumber;
          raffleItemPrizes: ([string, BigNumber, BigNumber] & {
            prizeAddress: string;
            prizeId: BigNumber;
            prizeQuantity: BigNumber;
          })[];
        })[];
      }
    >;

    RaffleStarted(
      raffleId?: BigNumberish | null,
      raffleEnd?: null,
      raffleItems?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        ([
          string,
          BigNumber,
          ([string, BigNumber, BigNumber] & {
            prizeAddress: string;
            prizeId: BigNumber;
            prizeQuantity: BigNumber;
          })[]
        ] & {
          ticketAddress: string;
          ticketId: BigNumber;
          raffleItemPrizes: ([string, BigNumber, BigNumber] & {
            prizeAddress: string;
            prizeId: BigNumber;
            prizeQuantity: BigNumber;
          })[];
        })[]
      ],
      {
        raffleId: BigNumber;
        raffleEnd: BigNumber;
        raffleItems: ([
          string,
          BigNumber,
          ([string, BigNumber, BigNumber] & {
            prizeAddress: string;
            prizeId: BigNumber;
            prizeQuantity: BigNumber;
          })[]
        ] & {
          ticketAddress: string;
          ticketId: BigNumber;
          raffleItemPrizes: ([string, BigNumber, BigNumber] & {
            prizeAddress: string;
            prizeId: BigNumber;
            prizeQuantity: BigNumber;
          })[];
        })[];
      }
    >;

    "RaffleTicketsEntered(uint256,address,tuple[])"(
      raffleId?: BigNumberish | null,
      entrant?: null,
      ticketItems?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        ([string, BigNumber, BigNumber] & {
          ticketAddress: string;
          ticketId: BigNumber;
          ticketQuantity: BigNumber;
        })[]
      ],
      {
        raffleId: BigNumber;
        entrant: string;
        ticketItems: ([string, BigNumber, BigNumber] & {
          ticketAddress: string;
          ticketId: BigNumber;
          ticketQuantity: BigNumber;
        })[];
      }
    >;

    RaffleTicketsEntered(
      raffleId?: BigNumberish | null,
      entrant?: null,
      ticketItems?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        ([string, BigNumber, BigNumber] & {
          ticketAddress: string;
          ticketId: BigNumber;
          ticketQuantity: BigNumber;
        })[]
      ],
      {
        raffleId: BigNumber;
        entrant: string;
        ticketItems: ([string, BigNumber, BigNumber] & {
          ticketAddress: string;
          ticketId: BigNumber;
          ticketQuantity: BigNumber;
        })[];
      }
    >;
  };

  estimateGas: {
    changeVRF(
      _newFee: BigNumberish,
      _keyHash: BytesLike,
      _vrfCoordinator: string,
      _link: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeVRFFee(
      _newFee: BigNumberish,
      _keyHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimPrize(
      _raffleId: BigNumberish,
      _entrant: string,
      _wins: {
        entryIndex: BigNumberish;
        prizes: {
          raffleItemPrizeIndex: BigNumberish;
          winningPrizeNumbers: BigNumberish[];
        }[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    drawRandomNumber(
      _raffleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    drawRandomNumberTest(
      _raffleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enterTickets(
      _raffleId: BigNumberish,
      _ticketItems: {
        ticketAddress: string;
        ticketId: BigNumberish;
        ticketQuantity: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getEntrants(
      _raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntries(
      _raffleId: BigNumberish,
      _entrant: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRaffles(overrides?: CallOverrides): Promise<BigNumber>;

    linkBalance(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(_keyHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    raffleInfo(
      _raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    raffleSupply(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomness(
      _requestId: BytesLike,
      _randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLinkTokens(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startRaffle(
      _raffleDuration: BigNumberish,
      _raffleItems: {
        ticketAddress: string;
        ticketId: BigNumberish;
        raffleItemPrizes: {
          prizeAddress: string;
          prizeId: BigNumberish;
          prizeQuantity: BigNumberish;
        }[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticketStats(
      _raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      _newContractOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeVRF(
      _newFee: BigNumberish,
      _keyHash: BytesLike,
      _vrfCoordinator: string,
      _link: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeVRFFee(
      _newFee: BigNumberish,
      _keyHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimPrize(
      _raffleId: BigNumberish,
      _entrant: string,
      _wins: {
        entryIndex: BigNumberish;
        prizes: {
          raffleItemPrizeIndex: BigNumberish;
          winningPrizeNumbers: BigNumberish[];
        }[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    drawRandomNumber(
      _raffleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    drawRandomNumberTest(
      _raffleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enterTickets(
      _raffleId: BigNumberish,
      _ticketItems: {
        ticketAddress: string;
        ticketId: BigNumberish;
        ticketQuantity: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getEntrants(
      _raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntries(
      _raffleId: BigNumberish,
      _entrant: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRaffles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    linkBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      _keyHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    raffleInfo(
      _raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    raffleSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rawFulfillRandomness(
      _requestId: BytesLike,
      _randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLinkTokens(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startRaffle(
      _raffleDuration: BigNumberish,
      _raffleItems: {
        ticketAddress: string;
        ticketId: BigNumberish;
        raffleItemPrizes: {
          prizeAddress: string;
          prizeId: BigNumberish;
          prizeQuantity: BigNumberish;
        }[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticketStats(
      _raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newContractOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
