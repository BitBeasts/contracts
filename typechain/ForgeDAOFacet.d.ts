/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ForgeDAOFacetInterface extends ethers.utils.Interface {
  functions: {
    "getAlloyBurnFeeInBips()": FunctionFragment;
    "getAlloyDaoFeeInBips()": FunctionFragment;
    "pauseContract()": FunctionFragment;
    "setAavegotchiDaoAddress(address)": FunctionFragment;
    "setAavegotchiDiamondAddress(address)": FunctionFragment;
    "setAlloyBurnFeeInBips(uint256)": FunctionFragment;
    "setAlloyDaoFeeInBips(uint256)": FunctionFragment;
    "setForgeAlloyCost(tuple)": FunctionFragment;
    "setForgeEssenceCost(tuple)": FunctionFragment;
    "setForgeTimeCostInBlocks(tuple)": FunctionFragment;
    "setGltrAddress(address)": FunctionFragment;
    "setSkillPointsEarnedFromForge(tuple)": FunctionFragment;
    "setSmeltingSkillPointReductionFactorBips(uint256)": FunctionFragment;
    "unpauseContract()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAlloyBurnFeeInBips",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAlloyDaoFeeInBips",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAavegotchiDaoAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAavegotchiDiamondAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAlloyBurnFeeInBips",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAlloyDaoFeeInBips",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setForgeAlloyCost",
    values: [
      {
        common: BigNumberish;
        uncommon: BigNumberish;
        rare: BigNumberish;
        legendary: BigNumberish;
        mythical: BigNumberish;
        godlike: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setForgeEssenceCost",
    values: [
      {
        common: BigNumberish;
        uncommon: BigNumberish;
        rare: BigNumberish;
        legendary: BigNumberish;
        mythical: BigNumberish;
        godlike: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setForgeTimeCostInBlocks",
    values: [
      {
        common: BigNumberish;
        uncommon: BigNumberish;
        rare: BigNumberish;
        legendary: BigNumberish;
        mythical: BigNumberish;
        godlike: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setGltrAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSkillPointsEarnedFromForge",
    values: [
      {
        common: BigNumberish;
        uncommon: BigNumberish;
        rare: BigNumberish;
        legendary: BigNumberish;
        mythical: BigNumberish;
        godlike: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSmeltingSkillPointReductionFactorBips",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseContract",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getAlloyBurnFeeInBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAlloyDaoFeeInBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAavegotchiDaoAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAavegotchiDiamondAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAlloyBurnFeeInBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAlloyDaoFeeInBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForgeAlloyCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForgeEssenceCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForgeTimeCostInBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGltrAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSkillPointsEarnedFromForge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSmeltingSkillPointReductionFactorBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseContract",
    data: BytesLike
  ): Result;

  events: {
    "ContractPaused()": EventFragment;
    "ContractUnpaused()": EventFragment;
    "SetAavegotchiDaoAddress(address)": EventFragment;
    "SetAavegotchiDiamondAddress(address)": EventFragment;
    "SetAlloyBurnFee(uint256)": EventFragment;
    "SetAlloyDaoFee(uint256)": EventFragment;
    "SetForgeAlloyCost(tuple)": EventFragment;
    "SetForgeEssenceCost(tuple)": EventFragment;
    "SetForgeTimeCostInBlocks(tuple)": EventFragment;
    "SetGeodeWinChance(tuple)": EventFragment;
    "SetGltrAddress(address)": EventFragment;
    "SetMaxSupplyPerToken(uint256[],uint256[])": EventFragment;
    "SetSkillPointsEarnedFromForge(tuple)": EventFragment;
    "SetSmeltingSkillPointReductionFactorBips(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractUnpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAavegotchiDaoAddress"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetAavegotchiDiamondAddress"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAlloyBurnFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAlloyDaoFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetForgeAlloyCost"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetForgeEssenceCost"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetForgeTimeCostInBlocks"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGeodeWinChance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGltrAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxSupplyPerToken"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetSkillPointsEarnedFromForge"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetSmeltingSkillPointReductionFactorBips"
  ): EventFragment;
}

export type ContractPausedEvent = TypedEvent<[] & {}>;

export type ContractUnpausedEvent = TypedEvent<[] & {}>;

export type SetAavegotchiDaoAddressEvent = TypedEvent<
  [string] & { newAddress: string }
>;

export type SetAavegotchiDiamondAddressEvent = TypedEvent<
  [string] & { _address: string }
>;

export type SetAlloyBurnFeeEvent = TypedEvent<
  [BigNumber] & { bips: BigNumber }
>;

export type SetAlloyDaoFeeEvent = TypedEvent<[BigNumber] & { bips: BigNumber }>;

export type SetForgeAlloyCostEvent = TypedEvent<
  [
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      common: BigNumber;
      uncommon: BigNumber;
      rare: BigNumber;
      legendary: BigNumber;
      mythical: BigNumber;
      godlike: BigNumber;
    }
  ] & {
    newCosts: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      common: BigNumber;
      uncommon: BigNumber;
      rare: BigNumber;
      legendary: BigNumber;
      mythical: BigNumber;
      godlike: BigNumber;
    };
  }
>;

export type SetForgeEssenceCostEvent = TypedEvent<
  [
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      common: BigNumber;
      uncommon: BigNumber;
      rare: BigNumber;
      legendary: BigNumber;
      mythical: BigNumber;
      godlike: BigNumber;
    }
  ] & {
    newCosts: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      common: BigNumber;
      uncommon: BigNumber;
      rare: BigNumber;
      legendary: BigNumber;
      mythical: BigNumber;
      godlike: BigNumber;
    };
  }
>;

export type SetForgeTimeCostInBlocksEvent = TypedEvent<
  [
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      common: BigNumber;
      uncommon: BigNumber;
      rare: BigNumber;
      legendary: BigNumber;
      mythical: BigNumber;
      godlike: BigNumber;
    }
  ] & {
    newCosts: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      common: BigNumber;
      uncommon: BigNumber;
      rare: BigNumber;
      legendary: BigNumber;
      mythical: BigNumber;
      godlike: BigNumber;
    };
  }
>;

export type SetGeodeWinChanceEvent = TypedEvent<
  [
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      common: BigNumber;
      uncommon: BigNumber;
      rare: BigNumber;
      legendary: BigNumber;
      mythical: BigNumber;
      godlike: BigNumber;
    }
  ] & {
    newChances: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      common: BigNumber;
      uncommon: BigNumber;
      rare: BigNumber;
      legendary: BigNumber;
      mythical: BigNumber;
      godlike: BigNumber;
    };
  }
>;

export type SetGltrAddressEvent = TypedEvent<[string] & { newAddress: string }>;

export type SetMaxSupplyPerTokenEvent = TypedEvent<
  [BigNumber[], BigNumber[]] & {
    tokenIds: BigNumber[];
    supplyPerTokenId: BigNumber[];
  }
>;

export type SetSkillPointsEarnedFromForgeEvent = TypedEvent<
  [
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      common: BigNumber;
      uncommon: BigNumber;
      rare: BigNumber;
      legendary: BigNumber;
      mythical: BigNumber;
      godlike: BigNumber;
    }
  ] & {
    newPoints: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      common: BigNumber;
      uncommon: BigNumber;
      rare: BigNumber;
      legendary: BigNumber;
      mythical: BigNumber;
      godlike: BigNumber;
    };
  }
>;

export type SetSmeltingSkillPointReductionFactorBipsEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldBips: BigNumber; newBips: BigNumber }
>;

export class ForgeDAOFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ForgeDAOFacetInterface;

  functions: {
    getAlloyBurnFeeInBips(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAlloyDaoFeeInBips(overrides?: CallOverrides): Promise<[BigNumber]>;

    pauseContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAavegotchiDaoAddress(
      daoAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAavegotchiDiamondAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAlloyBurnFeeInBips(
      alloyBurnFeeInBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAlloyDaoFeeInBips(
      alloyDaoFeeInBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setForgeAlloyCost(
      costs: {
        common: BigNumberish;
        uncommon: BigNumberish;
        rare: BigNumberish;
        legendary: BigNumberish;
        mythical: BigNumberish;
        godlike: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setForgeEssenceCost(
      costs: {
        common: BigNumberish;
        uncommon: BigNumberish;
        rare: BigNumberish;
        legendary: BigNumberish;
        mythical: BigNumberish;
        godlike: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setForgeTimeCostInBlocks(
      costs: {
        common: BigNumberish;
        uncommon: BigNumberish;
        rare: BigNumberish;
        legendary: BigNumberish;
        mythical: BigNumberish;
        godlike: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGltrAddress(
      gltr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSkillPointsEarnedFromForge(
      points: {
        common: BigNumberish;
        uncommon: BigNumberish;
        rare: BigNumberish;
        legendary: BigNumberish;
        mythical: BigNumberish;
        godlike: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSmeltingSkillPointReductionFactorBips(
      bips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpauseContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getAlloyBurnFeeInBips(overrides?: CallOverrides): Promise<BigNumber>;

  getAlloyDaoFeeInBips(overrides?: CallOverrides): Promise<BigNumber>;

  pauseContract(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAavegotchiDaoAddress(
    daoAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAavegotchiDiamondAddress(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAlloyBurnFeeInBips(
    alloyBurnFeeInBips: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAlloyDaoFeeInBips(
    alloyDaoFeeInBips: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setForgeAlloyCost(
    costs: {
      common: BigNumberish;
      uncommon: BigNumberish;
      rare: BigNumberish;
      legendary: BigNumberish;
      mythical: BigNumberish;
      godlike: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setForgeEssenceCost(
    costs: {
      common: BigNumberish;
      uncommon: BigNumberish;
      rare: BigNumberish;
      legendary: BigNumberish;
      mythical: BigNumberish;
      godlike: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setForgeTimeCostInBlocks(
    costs: {
      common: BigNumberish;
      uncommon: BigNumberish;
      rare: BigNumberish;
      legendary: BigNumberish;
      mythical: BigNumberish;
      godlike: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGltrAddress(
    gltr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSkillPointsEarnedFromForge(
    points: {
      common: BigNumberish;
      uncommon: BigNumberish;
      rare: BigNumberish;
      legendary: BigNumberish;
      mythical: BigNumberish;
      godlike: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSmeltingSkillPointReductionFactorBips(
    bips: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpauseContract(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAlloyBurnFeeInBips(overrides?: CallOverrides): Promise<BigNumber>;

    getAlloyDaoFeeInBips(overrides?: CallOverrides): Promise<BigNumber>;

    pauseContract(overrides?: CallOverrides): Promise<void>;

    setAavegotchiDaoAddress(
      daoAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAavegotchiDiamondAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAlloyBurnFeeInBips(
      alloyBurnFeeInBips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAlloyDaoFeeInBips(
      alloyDaoFeeInBips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setForgeAlloyCost(
      costs: {
        common: BigNumberish;
        uncommon: BigNumberish;
        rare: BigNumberish;
        legendary: BigNumberish;
        mythical: BigNumberish;
        godlike: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setForgeEssenceCost(
      costs: {
        common: BigNumberish;
        uncommon: BigNumberish;
        rare: BigNumberish;
        legendary: BigNumberish;
        mythical: BigNumberish;
        godlike: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setForgeTimeCostInBlocks(
      costs: {
        common: BigNumberish;
        uncommon: BigNumberish;
        rare: BigNumberish;
        legendary: BigNumberish;
        mythical: BigNumberish;
        godlike: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setGltrAddress(gltr: string, overrides?: CallOverrides): Promise<void>;

    setSkillPointsEarnedFromForge(
      points: {
        common: BigNumberish;
        uncommon: BigNumberish;
        rare: BigNumberish;
        legendary: BigNumberish;
        mythical: BigNumberish;
        godlike: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setSmeltingSkillPointReductionFactorBips(
      bips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseContract(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ContractPaused()"(): TypedEventFilter<[], {}>;

    ContractPaused(): TypedEventFilter<[], {}>;

    "ContractUnpaused()"(): TypedEventFilter<[], {}>;

    ContractUnpaused(): TypedEventFilter<[], {}>;

    "SetAavegotchiDaoAddress(address)"(
      newAddress?: null
    ): TypedEventFilter<[string], { newAddress: string }>;

    SetAavegotchiDaoAddress(
      newAddress?: null
    ): TypedEventFilter<[string], { newAddress: string }>;

    "SetAavegotchiDiamondAddress(address)"(
      _address?: null
    ): TypedEventFilter<[string], { _address: string }>;

    SetAavegotchiDiamondAddress(
      _address?: null
    ): TypedEventFilter<[string], { _address: string }>;

    "SetAlloyBurnFee(uint256)"(
      bips?: null
    ): TypedEventFilter<[BigNumber], { bips: BigNumber }>;

    SetAlloyBurnFee(
      bips?: null
    ): TypedEventFilter<[BigNumber], { bips: BigNumber }>;

    "SetAlloyDaoFee(uint256)"(
      bips?: null
    ): TypedEventFilter<[BigNumber], { bips: BigNumber }>;

    SetAlloyDaoFee(
      bips?: null
    ): TypedEventFilter<[BigNumber], { bips: BigNumber }>;

    "SetForgeAlloyCost(tuple)"(
      newCosts?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          common: BigNumber;
          uncommon: BigNumber;
          rare: BigNumber;
          legendary: BigNumber;
          mythical: BigNumber;
          godlike: BigNumber;
        }
      ],
      {
        newCosts: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          common: BigNumber;
          uncommon: BigNumber;
          rare: BigNumber;
          legendary: BigNumber;
          mythical: BigNumber;
          godlike: BigNumber;
        };
      }
    >;

    SetForgeAlloyCost(
      newCosts?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          common: BigNumber;
          uncommon: BigNumber;
          rare: BigNumber;
          legendary: BigNumber;
          mythical: BigNumber;
          godlike: BigNumber;
        }
      ],
      {
        newCosts: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          common: BigNumber;
          uncommon: BigNumber;
          rare: BigNumber;
          legendary: BigNumber;
          mythical: BigNumber;
          godlike: BigNumber;
        };
      }
    >;

    "SetForgeEssenceCost(tuple)"(
      newCosts?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          common: BigNumber;
          uncommon: BigNumber;
          rare: BigNumber;
          legendary: BigNumber;
          mythical: BigNumber;
          godlike: BigNumber;
        }
      ],
      {
        newCosts: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          common: BigNumber;
          uncommon: BigNumber;
          rare: BigNumber;
          legendary: BigNumber;
          mythical: BigNumber;
          godlike: BigNumber;
        };
      }
    >;

    SetForgeEssenceCost(
      newCosts?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          common: BigNumber;
          uncommon: BigNumber;
          rare: BigNumber;
          legendary: BigNumber;
          mythical: BigNumber;
          godlike: BigNumber;
        }
      ],
      {
        newCosts: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          common: BigNumber;
          uncommon: BigNumber;
          rare: BigNumber;
          legendary: BigNumber;
          mythical: BigNumber;
          godlike: BigNumber;
        };
      }
    >;

    "SetForgeTimeCostInBlocks(tuple)"(
      newCosts?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          common: BigNumber;
          uncommon: BigNumber;
          rare: BigNumber;
          legendary: BigNumber;
          mythical: BigNumber;
          godlike: BigNumber;
        }
      ],
      {
        newCosts: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          common: BigNumber;
          uncommon: BigNumber;
          rare: BigNumber;
          legendary: BigNumber;
          mythical: BigNumber;
          godlike: BigNumber;
        };
      }
    >;

    SetForgeTimeCostInBlocks(
      newCosts?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          common: BigNumber;
          uncommon: BigNumber;
          rare: BigNumber;
          legendary: BigNumber;
          mythical: BigNumber;
          godlike: BigNumber;
        }
      ],
      {
        newCosts: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          common: BigNumber;
          uncommon: BigNumber;
          rare: BigNumber;
          legendary: BigNumber;
          mythical: BigNumber;
          godlike: BigNumber;
        };
      }
    >;

    "SetGeodeWinChance(tuple)"(
      newChances?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          common: BigNumber;
          uncommon: BigNumber;
          rare: BigNumber;
          legendary: BigNumber;
          mythical: BigNumber;
          godlike: BigNumber;
        }
      ],
      {
        newChances: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          common: BigNumber;
          uncommon: BigNumber;
          rare: BigNumber;
          legendary: BigNumber;
          mythical: BigNumber;
          godlike: BigNumber;
        };
      }
    >;

    SetGeodeWinChance(
      newChances?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          common: BigNumber;
          uncommon: BigNumber;
          rare: BigNumber;
          legendary: BigNumber;
          mythical: BigNumber;
          godlike: BigNumber;
        }
      ],
      {
        newChances: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          common: BigNumber;
          uncommon: BigNumber;
          rare: BigNumber;
          legendary: BigNumber;
          mythical: BigNumber;
          godlike: BigNumber;
        };
      }
    >;

    "SetGltrAddress(address)"(
      newAddress?: null
    ): TypedEventFilter<[string], { newAddress: string }>;

    SetGltrAddress(
      newAddress?: null
    ): TypedEventFilter<[string], { newAddress: string }>;

    "SetMaxSupplyPerToken(uint256[],uint256[])"(
      tokenIds?: null,
      supplyPerTokenId?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[]],
      { tokenIds: BigNumber[]; supplyPerTokenId: BigNumber[] }
    >;

    SetMaxSupplyPerToken(
      tokenIds?: null,
      supplyPerTokenId?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[]],
      { tokenIds: BigNumber[]; supplyPerTokenId: BigNumber[] }
    >;

    "SetSkillPointsEarnedFromForge(tuple)"(
      newPoints?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          common: BigNumber;
          uncommon: BigNumber;
          rare: BigNumber;
          legendary: BigNumber;
          mythical: BigNumber;
          godlike: BigNumber;
        }
      ],
      {
        newPoints: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          common: BigNumber;
          uncommon: BigNumber;
          rare: BigNumber;
          legendary: BigNumber;
          mythical: BigNumber;
          godlike: BigNumber;
        };
      }
    >;

    SetSkillPointsEarnedFromForge(
      newPoints?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          common: BigNumber;
          uncommon: BigNumber;
          rare: BigNumber;
          legendary: BigNumber;
          mythical: BigNumber;
          godlike: BigNumber;
        }
      ],
      {
        newPoints: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          common: BigNumber;
          uncommon: BigNumber;
          rare: BigNumber;
          legendary: BigNumber;
          mythical: BigNumber;
          godlike: BigNumber;
        };
      }
    >;

    "SetSmeltingSkillPointReductionFactorBips(uint256,uint256)"(
      oldBips?: null,
      newBips?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldBips: BigNumber; newBips: BigNumber }
    >;

    SetSmeltingSkillPointReductionFactorBips(
      oldBips?: null,
      newBips?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldBips: BigNumber; newBips: BigNumber }
    >;
  };

  estimateGas: {
    getAlloyBurnFeeInBips(overrides?: CallOverrides): Promise<BigNumber>;

    getAlloyDaoFeeInBips(overrides?: CallOverrides): Promise<BigNumber>;

    pauseContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAavegotchiDaoAddress(
      daoAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAavegotchiDiamondAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAlloyBurnFeeInBips(
      alloyBurnFeeInBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAlloyDaoFeeInBips(
      alloyDaoFeeInBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setForgeAlloyCost(
      costs: {
        common: BigNumberish;
        uncommon: BigNumberish;
        rare: BigNumberish;
        legendary: BigNumberish;
        mythical: BigNumberish;
        godlike: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setForgeEssenceCost(
      costs: {
        common: BigNumberish;
        uncommon: BigNumberish;
        rare: BigNumberish;
        legendary: BigNumberish;
        mythical: BigNumberish;
        godlike: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setForgeTimeCostInBlocks(
      costs: {
        common: BigNumberish;
        uncommon: BigNumberish;
        rare: BigNumberish;
        legendary: BigNumberish;
        mythical: BigNumberish;
        godlike: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGltrAddress(
      gltr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSkillPointsEarnedFromForge(
      points: {
        common: BigNumberish;
        uncommon: BigNumberish;
        rare: BigNumberish;
        legendary: BigNumberish;
        mythical: BigNumberish;
        godlike: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSmeltingSkillPointReductionFactorBips(
      bips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpauseContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAlloyBurnFeeInBips(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAlloyDaoFeeInBips(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAavegotchiDaoAddress(
      daoAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAavegotchiDiamondAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAlloyBurnFeeInBips(
      alloyBurnFeeInBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAlloyDaoFeeInBips(
      alloyDaoFeeInBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setForgeAlloyCost(
      costs: {
        common: BigNumberish;
        uncommon: BigNumberish;
        rare: BigNumberish;
        legendary: BigNumberish;
        mythical: BigNumberish;
        godlike: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setForgeEssenceCost(
      costs: {
        common: BigNumberish;
        uncommon: BigNumberish;
        rare: BigNumberish;
        legendary: BigNumberish;
        mythical: BigNumberish;
        godlike: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setForgeTimeCostInBlocks(
      costs: {
        common: BigNumberish;
        uncommon: BigNumberish;
        rare: BigNumberish;
        legendary: BigNumberish;
        mythical: BigNumberish;
        godlike: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGltrAddress(
      gltr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSkillPointsEarnedFromForge(
      points: {
        common: BigNumberish;
        uncommon: BigNumberish;
        rare: BigNumberish;
        legendary: BigNumberish;
        mythical: BigNumberish;
        godlike: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSmeltingSkillPointReductionFactorBips(
      bips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpauseContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
