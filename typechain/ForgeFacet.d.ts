/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ForgeFacetInterface extends ethers.utils.Interface {
  functions: {
    "adminMint(address,uint256,uint256)": FunctionFragment;
    "adminMintBatch(address,uint256[],uint256[])": FunctionFragment;
    "claimForgeQueueItems(uint256[])": FunctionFragment;
    "fixInvalidTokenIds(address[])": FunctionFragment;
    "forgeTime(uint256,uint8)": FunctionFragment;
    "forgeWearables(uint256[],uint256[],uint40[])": FunctionFragment;
    "geodeTokenIdFromRsm(uint8)": FunctionFragment;
    "getAavegotchiSmithingLevel(uint256)": FunctionFragment;
    "getAavegotchiSmithingSkillPts(uint256)": FunctionFragment;
    "getCoreTokenId(uint8,bool[16])": FunctionFragment;
    "getForgeQueue()": FunctionFragment;
    "getForgeQueueItem(uint256)": FunctionFragment;
    "getForgeQueueItemsByOwner(address)": FunctionFragment;
    "getSmithingLevelMultiplierBips(uint256)": FunctionFragment;
    "isForgeable(uint256)": FunctionFragment;
    "isGotchiForging(uint256)": FunctionFragment;
    "mintEssence(address)": FunctionFragment;
    "reduceQueueTime(uint256[],uint40[])": FunctionFragment;
    "smeltWearables(uint256[],uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "adminMint",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminMintBatch",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimForgeQueueItems",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fixInvalidTokenIds",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "forgeTime",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forgeWearables",
    values: [BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "geodeTokenIdFromRsm",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAavegotchiSmithingLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAavegotchiSmithingSkillPts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCoreTokenId",
    values: [
      BigNumberish,
      [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getForgeQueue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getForgeQueueItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getForgeQueueItemsByOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSmithingLevelMultiplierBips",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isForgeable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isGotchiForging",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mintEssence", values: [string]): string;
  encodeFunctionData(
    functionFragment: "reduceQueueTime",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "smeltWearables",
    values: [BigNumberish[], BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "adminMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminMintBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimForgeQueueItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixInvalidTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forgeTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forgeWearables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "geodeTokenIdFromRsm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAavegotchiSmithingLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAavegotchiSmithingSkillPts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoreTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getForgeQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getForgeQueueItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getForgeQueueItemsByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSmithingLevelMultiplierBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isForgeable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGotchiForging",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintEssence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reduceQueueTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "smeltWearables",
    data: BytesLike
  ): Result;

  events: {
    "AddedToQueue(address,uint256,uint256,uint40,uint256)": EventFragment;
    "ForgeQueueClaimed(uint256,uint256)": EventFragment;
    "ForgeTimeReduced(uint256,uint256,uint256,uint40)": EventFragment;
    "ItemForged(uint256,uint256)": EventFragment;
    "ItemSmelted(uint256,uint256)": EventFragment;
    "QueueTimeReduced(uint256,uint40)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedToQueue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForgeQueueClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForgeTimeReduced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemForged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemSmelted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QueueTimeReduced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
}

export type AddedToQueueEvent = TypedEvent<
  [string, BigNumber, BigNumber, number, BigNumber] & {
    owner: string;
    itemId: BigNumber;
    gotchiId: BigNumber;
    readyBlock: number;
    queueId: BigNumber;
  }
>;

export type ForgeQueueClaimedEvent = TypedEvent<
  [BigNumber, BigNumber] & { itemId: BigNumber; gotchiId: BigNumber }
>;

export type ForgeTimeReducedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, number] & {
    queueId: BigNumber;
    gotchiId: BigNumber;
    itemId: BigNumber;
    _blocksReduced: number;
  }
>;

export type ItemForgedEvent = TypedEvent<
  [BigNumber, BigNumber] & { itemId: BigNumber; gotchiId: BigNumber }
>;

export type ItemSmeltedEvent = TypedEvent<
  [BigNumber, BigNumber] & { itemId: BigNumber; gotchiId: BigNumber }
>;

export type QueueTimeReducedEvent = TypedEvent<
  [BigNumber, number] & { gotchiId: BigNumber; reducedBlocks: number }
>;

export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]] & {
    operator: string;
    from: string;
    to: string;
    ids: BigNumber[];
    values: BigNumber[];
  }
>;

export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    operator: string;
    from: string;
    to: string;
    id: BigNumber;
    value: BigNumber;
  }
>;

export class ForgeFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ForgeFacetInterface;

  functions: {
    adminMint(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminMintBatch(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimForgeQueueItems(
      gotchiIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fixInvalidTokenIds(
      owners: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forgeTime(
      gotchiId: BigNumberish,
      rsm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    forgeWearables(
      _itemIds: BigNumberish[],
      _gotchiIds: BigNumberish[],
      _gltr: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    geodeTokenIdFromRsm(
      rarityScoreModifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenId: BigNumber }>;

    getAavegotchiSmithingLevel(
      gotchiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAavegotchiSmithingSkillPts(
      gotchiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCoreTokenId(
      rarityScoreModifier: BigNumberish,
      slotPositions: [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenId: BigNumber }>;

    getForgeQueue(
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber, number, boolean] & {
          itemId: BigNumber;
          gotchiId: BigNumber;
          id: BigNumber;
          readyBlock: number;
          claimed: boolean;
        })[]
      ] & {
        queue: ([BigNumber, BigNumber, BigNumber, number, boolean] & {
          itemId: BigNumber;
          gotchiId: BigNumber;
          id: BigNumber;
          readyBlock: number;
          claimed: boolean;
        })[];
      }
    >;

    getForgeQueueItem(
      gotchiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, number, boolean] & {
          itemId: BigNumber;
          gotchiId: BigNumber;
          id: BigNumber;
          readyBlock: number;
          claimed: boolean;
        }
      ]
    >;

    getForgeQueueItemsByOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber, number, boolean] & {
          itemId: BigNumber;
          gotchiId: BigNumber;
          id: BigNumber;
          readyBlock: number;
          claimed: boolean;
        })[]
      ] & {
        output: ([BigNumber, BigNumber, BigNumber, number, boolean] & {
          itemId: BigNumber;
          gotchiId: BigNumber;
          id: BigNumber;
          readyBlock: number;
          claimed: boolean;
        })[];
      }
    >;

    getSmithingLevelMultiplierBips(
      gotchiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isForgeable(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { available: boolean }>;

    isGotchiForging(
      gotchiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintEssence(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reduceQueueTime(
      _gotchiIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    smeltWearables(
      _itemIds: BigNumberish[],
      _gotchiIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  adminMint(
    account: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminMintBatch(
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimForgeQueueItems(
    gotchiIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fixInvalidTokenIds(
    owners: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forgeTime(
    gotchiId: BigNumberish,
    rsm: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  forgeWearables(
    _itemIds: BigNumberish[],
    _gotchiIds: BigNumberish[],
    _gltr: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  geodeTokenIdFromRsm(
    rarityScoreModifier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAavegotchiSmithingLevel(
    gotchiId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAavegotchiSmithingSkillPts(
    gotchiId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCoreTokenId(
    rarityScoreModifier: BigNumberish,
    slotPositions: [
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean
    ],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getForgeQueue(
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber, number, boolean] & {
      itemId: BigNumber;
      gotchiId: BigNumber;
      id: BigNumber;
      readyBlock: number;
      claimed: boolean;
    })[]
  >;

  getForgeQueueItem(
    gotchiId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number, boolean] & {
      itemId: BigNumber;
      gotchiId: BigNumber;
      id: BigNumber;
      readyBlock: number;
      claimed: boolean;
    }
  >;

  getForgeQueueItemsByOwner(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber, number, boolean] & {
      itemId: BigNumber;
      gotchiId: BigNumber;
      id: BigNumber;
      readyBlock: number;
      claimed: boolean;
    })[]
  >;

  getSmithingLevelMultiplierBips(
    gotchiId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isForgeable(
    itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isGotchiForging(
    gotchiId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintEssence(
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reduceQueueTime(
    _gotchiIds: BigNumberish[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  smeltWearables(
    _itemIds: BigNumberish[],
    _gotchiIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    adminMint(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminMintBatch(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimForgeQueueItems(
      gotchiIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    fixInvalidTokenIds(
      owners: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    forgeTime(
      gotchiId: BigNumberish,
      rsm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forgeWearables(
      _itemIds: BigNumberish[],
      _gotchiIds: BigNumberish[],
      _gltr: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    geodeTokenIdFromRsm(
      rarityScoreModifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAavegotchiSmithingLevel(
      gotchiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAavegotchiSmithingSkillPts(
      gotchiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCoreTokenId(
      rarityScoreModifier: BigNumberish,
      slotPositions: [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getForgeQueue(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber, number, boolean] & {
        itemId: BigNumber;
        gotchiId: BigNumber;
        id: BigNumber;
        readyBlock: number;
        claimed: boolean;
      })[]
    >;

    getForgeQueueItem(
      gotchiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, boolean] & {
        itemId: BigNumber;
        gotchiId: BigNumber;
        id: BigNumber;
        readyBlock: number;
        claimed: boolean;
      }
    >;

    getForgeQueueItemsByOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber, number, boolean] & {
        itemId: BigNumber;
        gotchiId: BigNumber;
        id: BigNumber;
        readyBlock: number;
        claimed: boolean;
      })[]
    >;

    getSmithingLevelMultiplierBips(
      gotchiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isForgeable(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isGotchiForging(
      gotchiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintEssence(owner: string, overrides?: CallOverrides): Promise<void>;

    reduceQueueTime(
      _gotchiIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    smeltWearables(
      _itemIds: BigNumberish[],
      _gotchiIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddedToQueue(address,uint256,uint256,uint40,uint256)"(
      owner?: string | null,
      itemId?: BigNumberish | null,
      gotchiId?: BigNumberish | null,
      readyBlock?: null,
      queueId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, number, BigNumber],
      {
        owner: string;
        itemId: BigNumber;
        gotchiId: BigNumber;
        readyBlock: number;
        queueId: BigNumber;
      }
    >;

    AddedToQueue(
      owner?: string | null,
      itemId?: BigNumberish | null,
      gotchiId?: BigNumberish | null,
      readyBlock?: null,
      queueId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, number, BigNumber],
      {
        owner: string;
        itemId: BigNumber;
        gotchiId: BigNumber;
        readyBlock: number;
        queueId: BigNumber;
      }
    >;

    "ForgeQueueClaimed(uint256,uint256)"(
      itemId?: null,
      gotchiId?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { itemId: BigNumber; gotchiId: BigNumber }
    >;

    ForgeQueueClaimed(
      itemId?: null,
      gotchiId?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { itemId: BigNumber; gotchiId: BigNumber }
    >;

    "ForgeTimeReduced(uint256,uint256,uint256,uint40)"(
      queueId?: BigNumberish | null,
      gotchiId?: BigNumberish | null,
      itemId?: BigNumberish | null,
      _blocksReduced?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, number],
      {
        queueId: BigNumber;
        gotchiId: BigNumber;
        itemId: BigNumber;
        _blocksReduced: number;
      }
    >;

    ForgeTimeReduced(
      queueId?: BigNumberish | null,
      gotchiId?: BigNumberish | null,
      itemId?: BigNumberish | null,
      _blocksReduced?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, number],
      {
        queueId: BigNumber;
        gotchiId: BigNumber;
        itemId: BigNumber;
        _blocksReduced: number;
      }
    >;

    "ItemForged(uint256,uint256)"(
      itemId?: null,
      gotchiId?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { itemId: BigNumber; gotchiId: BigNumber }
    >;

    ItemForged(
      itemId?: null,
      gotchiId?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { itemId: BigNumber; gotchiId: BigNumber }
    >;

    "ItemSmelted(uint256,uint256)"(
      itemId?: null,
      gotchiId?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { itemId: BigNumber; gotchiId: BigNumber }
    >;

    ItemSmelted(
      itemId?: null,
      gotchiId?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { itemId: BigNumber; gotchiId: BigNumber }
    >;

    "QueueTimeReduced(uint256,uint40)"(
      gotchiId?: BigNumberish | null,
      reducedBlocks?: null
    ): TypedEventFilter<
      [BigNumber, number],
      { gotchiId: BigNumber; reducedBlocks: number }
    >;

    QueueTimeReduced(
      gotchiId?: BigNumberish | null,
      reducedBlocks?: null
    ): TypedEventFilter<
      [BigNumber, number],
      { gotchiId: BigNumber; reducedBlocks: number }
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string;
        to: string;
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string;
        to: string;
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        to: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        to: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;
  };

  estimateGas: {
    adminMint(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminMintBatch(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimForgeQueueItems(
      gotchiIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fixInvalidTokenIds(
      owners: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forgeTime(
      gotchiId: BigNumberish,
      rsm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forgeWearables(
      _itemIds: BigNumberish[],
      _gotchiIds: BigNumberish[],
      _gltr: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    geodeTokenIdFromRsm(
      rarityScoreModifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAavegotchiSmithingLevel(
      gotchiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAavegotchiSmithingSkillPts(
      gotchiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCoreTokenId(
      rarityScoreModifier: BigNumberish,
      slotPositions: [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getForgeQueue(overrides?: CallOverrides): Promise<BigNumber>;

    getForgeQueueItem(
      gotchiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getForgeQueueItemsByOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSmithingLevelMultiplierBips(
      gotchiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isForgeable(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGotchiForging(
      gotchiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintEssence(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reduceQueueTime(
      _gotchiIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    smeltWearables(
      _itemIds: BigNumberish[],
      _gotchiIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adminMint(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminMintBatch(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimForgeQueueItems(
      gotchiIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fixInvalidTokenIds(
      owners: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forgeTime(
      gotchiId: BigNumberish,
      rsm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forgeWearables(
      _itemIds: BigNumberish[],
      _gotchiIds: BigNumberish[],
      _gltr: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    geodeTokenIdFromRsm(
      rarityScoreModifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAavegotchiSmithingLevel(
      gotchiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAavegotchiSmithingSkillPts(
      gotchiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCoreTokenId(
      rarityScoreModifier: BigNumberish,
      slotPositions: [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getForgeQueue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getForgeQueueItem(
      gotchiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getForgeQueueItemsByOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSmithingLevelMultiplierBips(
      gotchiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isForgeable(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGotchiForging(
      gotchiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintEssence(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reduceQueueTime(
      _gotchiIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    smeltWearables(
      _itemIds: BigNumberish[],
      _gotchiIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
