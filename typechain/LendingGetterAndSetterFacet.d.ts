/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LendingGetterAndSetterFacetInterface extends ethers.utils.Interface {
  functions: {
    "allowRevenueTokens(address[])": FunctionFragment;
    "balanceOfLentGotchis(address)": FunctionFragment;
    "batchSetLendingOperator(address,tuple[])": FunctionFragment;
    "disallowRevenueTokens(address[])": FunctionFragment;
    "getGotchiLendingFromToken(uint32)": FunctionFragment;
    "getGotchiLendingIdByToken(uint32)": FunctionFragment;
    "getGotchiLendingListingInfo(uint32)": FunctionFragment;
    "getGotchiLendings(bytes32,uint256)": FunctionFragment;
    "getGotchiLendingsLength()": FunctionFragment;
    "getLendingListingInfo(uint32)": FunctionFragment;
    "getLentTokenIdsOfLender(address)": FunctionFragment;
    "getOwnerGotchiLendings(address,bytes32,uint256)": FunctionFragment;
    "getOwnerGotchiLendingsLength(address,bytes32)": FunctionFragment;
    "getTokenBalancesInEscrow(uint32,address[])": FunctionFragment;
    "isAavegotchiLent(uint32)": FunctionFragment;
    "isAavegotchiListed(uint32)": FunctionFragment;
    "isLendingOperator(address,address,uint32)": FunctionFragment;
    "revenueTokenAllowed(address)": FunctionFragment;
    "setLendingOperator(address,uint32,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowRevenueTokens",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfLentGotchis",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSetLendingOperator",
    values: [string, { _tokenId: BigNumberish; _isLendingOperator: boolean }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "disallowRevenueTokens",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getGotchiLendingFromToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGotchiLendingIdByToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGotchiLendingListingInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGotchiLendings",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGotchiLendingsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingListingInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLentTokenIdsOfLender",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerGotchiLendings",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerGotchiLendingsLength",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBalancesInEscrow",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isAavegotchiLent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAavegotchiListed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isLendingOperator",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revenueTokenAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingOperator",
    values: [string, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowRevenueTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfLentGotchis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSetLendingOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disallowRevenueTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGotchiLendingFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGotchiLendingIdByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGotchiLendingListingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGotchiLendings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGotchiLendingsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingListingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLentTokenIdsOfLender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerGotchiLendings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerGotchiLendingsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBalancesInEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAavegotchiLent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAavegotchiListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLendingOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revenueTokenAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingOperator",
    data: BytesLike
  ): Result;

  events: {
    "LendingOperatorSet(address,address,uint32,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LendingOperatorSet"): EventFragment;
}

export type LendingOperatorSetEvent = TypedEvent<
  [string, string, number, boolean] & {
    lender: string;
    lendingOperator: string;
    tokenId: number;
    isLendingOperator: boolean;
  }
>;

export class LendingGetterAndSetterFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LendingGetterAndSetterFacetInterface;

  functions: {
    allowRevenueTokens(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOfLentGotchis(
      _lender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance_: BigNumber }>;

    batchSetLendingOperator(
      _lendingOperator: string,
      _inputs: { _tokenId: BigNumberish; _isLendingOperator: boolean }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disallowRevenueTokens(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getGotchiLendingFromToken(
      _erc721TokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          string,
          number,
          number,
          number,
          string,
          number,
          number,
          boolean,
          boolean,
          string,
          [number, number, number],
          number,
          number,
          string[]
        ] & {
          lender: string;
          initialCost: BigNumber;
          borrower: string;
          listingId: number;
          erc721TokenId: number;
          whitelistId: number;
          originalOwner: string;
          timeCreated: number;
          timeAgreed: number;
          canceled: boolean;
          completed: boolean;
          thirdParty: string;
          revenueSplit: [number, number, number];
          lastClaimed: number;
          period: number;
          revenueTokens: string[];
        }
      ] & {
        listing_: [
          string,
          BigNumber,
          string,
          number,
          number,
          number,
          string,
          number,
          number,
          boolean,
          boolean,
          string,
          [number, number, number],
          number,
          number,
          string[]
        ] & {
          lender: string;
          initialCost: BigNumber;
          borrower: string;
          listingId: number;
          erc721TokenId: number;
          whitelistId: number;
          originalOwner: string;
          timeCreated: number;
          timeAgreed: number;
          canceled: boolean;
          completed: boolean;
          thirdParty: string;
          revenueSplit: [number, number, number];
          lastClaimed: number;
          period: number;
          revenueTokens: string[];
        };
      }
    >;

    getGotchiLendingIdByToken(
      _erc721TokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getGotchiLendingListingInfo(
      _listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          string,
          number,
          number,
          number,
          string,
          number,
          number,
          boolean,
          boolean,
          string,
          [number, number, number],
          number,
          number,
          string[]
        ] & {
          lender: string;
          initialCost: BigNumber;
          borrower: string;
          listingId: number;
          erc721TokenId: number;
          whitelistId: number;
          originalOwner: string;
          timeCreated: number;
          timeAgreed: number;
          canceled: boolean;
          completed: boolean;
          thirdParty: string;
          revenueSplit: [number, number, number];
          lastClaimed: number;
          period: number;
          revenueTokens: string[];
        },
        [
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          [number, number, number, number, number, number],
          [number, number, number, number, number, number],
          [
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number
          ],
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          ([
            BigNumber,
            BigNumber,
            [
              string,
              string,
              string,
              [number, number, number, number, number, number],
              [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ],
              number[],
              [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              },
              BigNumber,
              BigNumber,
              BigNumber,
              number,
              number,
              boolean,
              number,
              boolean,
              number,
              number,
              number
            ] & {
              name: string;
              description: string;
              author: string;
              traitModifiers: [number, number, number, number, number, number];
              slotPositions: [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ];
              allowedCollaterals: number[];
              dimensions: [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              };
              ghstPrice: BigNumber;
              maxQuantity: BigNumber;
              totalQuantity: BigNumber;
              svgId: number;
              rarityScoreModifier: number;
              canPurchaseWithGhst: boolean;
              minLevel: number;
              canBeTransferred: boolean;
              category: number;
              kinshipBonus: number;
              experienceBonus: number;
            }
          ] & {
            balance: BigNumber;
            itemId: BigNumber;
            itemType: [
              string,
              string,
              string,
              [number, number, number, number, number, number],
              [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ],
              number[],
              [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              },
              BigNumber,
              BigNumber,
              BigNumber,
              number,
              number,
              boolean,
              number,
              boolean,
              number,
              number,
              number
            ] & {
              name: string;
              description: string;
              author: string;
              traitModifiers: [number, number, number, number, number, number];
              slotPositions: [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ];
              allowedCollaterals: number[];
              dimensions: [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              };
              ghstPrice: BigNumber;
              maxQuantity: BigNumber;
              totalQuantity: BigNumber;
              svgId: number;
              rarityScoreModifier: number;
              canPurchaseWithGhst: boolean;
              minLevel: number;
              canBeTransferred: boolean;
              category: number;
              kinshipBonus: number;
              experienceBonus: number;
            };
          })[]
        ] & {
          tokenId: BigNumber;
          name: string;
          owner: string;
          randomNumber: BigNumber;
          status: BigNumber;
          numericTraits: [number, number, number, number, number, number];
          modifiedNumericTraits: [
            number,
            number,
            number,
            number,
            number,
            number
          ];
          equippedWearables: [
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number
          ];
          collateral: string;
          escrow: string;
          stakedAmount: BigNumber;
          minimumStake: BigNumber;
          kinship: BigNumber;
          lastInteracted: BigNumber;
          experience: BigNumber;
          toNextLevel: BigNumber;
          usedSkillPoints: BigNumber;
          level: BigNumber;
          hauntId: BigNumber;
          baseRarityScore: BigNumber;
          modifiedRarityScore: BigNumber;
          locked: boolean;
          items: ([
            BigNumber,
            BigNumber,
            [
              string,
              string,
              string,
              [number, number, number, number, number, number],
              [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ],
              number[],
              [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              },
              BigNumber,
              BigNumber,
              BigNumber,
              number,
              number,
              boolean,
              number,
              boolean,
              number,
              number,
              number
            ] & {
              name: string;
              description: string;
              author: string;
              traitModifiers: [number, number, number, number, number, number];
              slotPositions: [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ];
              allowedCollaterals: number[];
              dimensions: [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              };
              ghstPrice: BigNumber;
              maxQuantity: BigNumber;
              totalQuantity: BigNumber;
              svgId: number;
              rarityScoreModifier: number;
              canPurchaseWithGhst: boolean;
              minLevel: number;
              canBeTransferred: boolean;
              category: number;
              kinshipBonus: number;
              experienceBonus: number;
            }
          ] & {
            balance: BigNumber;
            itemId: BigNumber;
            itemType: [
              string,
              string,
              string,
              [number, number, number, number, number, number],
              [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ],
              number[],
              [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              },
              BigNumber,
              BigNumber,
              BigNumber,
              number,
              number,
              boolean,
              number,
              boolean,
              number,
              number,
              number
            ] & {
              name: string;
              description: string;
              author: string;
              traitModifiers: [number, number, number, number, number, number];
              slotPositions: [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ];
              allowedCollaterals: number[];
              dimensions: [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              };
              ghstPrice: BigNumber;
              maxQuantity: BigNumber;
              totalQuantity: BigNumber;
              svgId: number;
              rarityScoreModifier: number;
              canPurchaseWithGhst: boolean;
              minLevel: number;
              canBeTransferred: boolean;
              category: number;
              kinshipBonus: number;
              experienceBonus: number;
            };
          })[];
        }
      ] & {
        listing_: [
          string,
          BigNumber,
          string,
          number,
          number,
          number,
          string,
          number,
          number,
          boolean,
          boolean,
          string,
          [number, number, number],
          number,
          number,
          string[]
        ] & {
          lender: string;
          initialCost: BigNumber;
          borrower: string;
          listingId: number;
          erc721TokenId: number;
          whitelistId: number;
          originalOwner: string;
          timeCreated: number;
          timeAgreed: number;
          canceled: boolean;
          completed: boolean;
          thirdParty: string;
          revenueSplit: [number, number, number];
          lastClaimed: number;
          period: number;
          revenueTokens: string[];
        };
        aavegotchiInfo_: [
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          [number, number, number, number, number, number],
          [number, number, number, number, number, number],
          [
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number
          ],
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          ([
            BigNumber,
            BigNumber,
            [
              string,
              string,
              string,
              [number, number, number, number, number, number],
              [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ],
              number[],
              [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              },
              BigNumber,
              BigNumber,
              BigNumber,
              number,
              number,
              boolean,
              number,
              boolean,
              number,
              number,
              number
            ] & {
              name: string;
              description: string;
              author: string;
              traitModifiers: [number, number, number, number, number, number];
              slotPositions: [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ];
              allowedCollaterals: number[];
              dimensions: [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              };
              ghstPrice: BigNumber;
              maxQuantity: BigNumber;
              totalQuantity: BigNumber;
              svgId: number;
              rarityScoreModifier: number;
              canPurchaseWithGhst: boolean;
              minLevel: number;
              canBeTransferred: boolean;
              category: number;
              kinshipBonus: number;
              experienceBonus: number;
            }
          ] & {
            balance: BigNumber;
            itemId: BigNumber;
            itemType: [
              string,
              string,
              string,
              [number, number, number, number, number, number],
              [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ],
              number[],
              [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              },
              BigNumber,
              BigNumber,
              BigNumber,
              number,
              number,
              boolean,
              number,
              boolean,
              number,
              number,
              number
            ] & {
              name: string;
              description: string;
              author: string;
              traitModifiers: [number, number, number, number, number, number];
              slotPositions: [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ];
              allowedCollaterals: number[];
              dimensions: [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              };
              ghstPrice: BigNumber;
              maxQuantity: BigNumber;
              totalQuantity: BigNumber;
              svgId: number;
              rarityScoreModifier: number;
              canPurchaseWithGhst: boolean;
              minLevel: number;
              canBeTransferred: boolean;
              category: number;
              kinshipBonus: number;
              experienceBonus: number;
            };
          })[]
        ] & {
          tokenId: BigNumber;
          name: string;
          owner: string;
          randomNumber: BigNumber;
          status: BigNumber;
          numericTraits: [number, number, number, number, number, number];
          modifiedNumericTraits: [
            number,
            number,
            number,
            number,
            number,
            number
          ];
          equippedWearables: [
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number
          ];
          collateral: string;
          escrow: string;
          stakedAmount: BigNumber;
          minimumStake: BigNumber;
          kinship: BigNumber;
          lastInteracted: BigNumber;
          experience: BigNumber;
          toNextLevel: BigNumber;
          usedSkillPoints: BigNumber;
          level: BigNumber;
          hauntId: BigNumber;
          baseRarityScore: BigNumber;
          modifiedRarityScore: BigNumber;
          locked: boolean;
          items: ([
            BigNumber,
            BigNumber,
            [
              string,
              string,
              string,
              [number, number, number, number, number, number],
              [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ],
              number[],
              [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              },
              BigNumber,
              BigNumber,
              BigNumber,
              number,
              number,
              boolean,
              number,
              boolean,
              number,
              number,
              number
            ] & {
              name: string;
              description: string;
              author: string;
              traitModifiers: [number, number, number, number, number, number];
              slotPositions: [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ];
              allowedCollaterals: number[];
              dimensions: [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              };
              ghstPrice: BigNumber;
              maxQuantity: BigNumber;
              totalQuantity: BigNumber;
              svgId: number;
              rarityScoreModifier: number;
              canPurchaseWithGhst: boolean;
              minLevel: number;
              canBeTransferred: boolean;
              category: number;
              kinshipBonus: number;
              experienceBonus: number;
            }
          ] & {
            balance: BigNumber;
            itemId: BigNumber;
            itemType: [
              string,
              string,
              string,
              [number, number, number, number, number, number],
              [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ],
              number[],
              [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              },
              BigNumber,
              BigNumber,
              BigNumber,
              number,
              number,
              boolean,
              number,
              boolean,
              number,
              number,
              number
            ] & {
              name: string;
              description: string;
              author: string;
              traitModifiers: [number, number, number, number, number, number];
              slotPositions: [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ];
              allowedCollaterals: number[];
              dimensions: [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              };
              ghstPrice: BigNumber;
              maxQuantity: BigNumber;
              totalQuantity: BigNumber;
              svgId: number;
              rarityScoreModifier: number;
              canPurchaseWithGhst: boolean;
              minLevel: number;
              canBeTransferred: boolean;
              category: number;
              kinshipBonus: number;
              experienceBonus: number;
            };
          })[];
        };
      }
    >;

    getGotchiLendings(
      _status: BytesLike,
      _length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          string,
          number,
          number,
          number,
          string,
          number,
          number,
          boolean,
          boolean,
          string,
          [number, number, number],
          number,
          number,
          string[]
        ] & {
          lender: string;
          initialCost: BigNumber;
          borrower: string;
          listingId: number;
          erc721TokenId: number;
          whitelistId: number;
          originalOwner: string;
          timeCreated: number;
          timeAgreed: number;
          canceled: boolean;
          completed: boolean;
          thirdParty: string;
          revenueSplit: [number, number, number];
          lastClaimed: number;
          period: number;
          revenueTokens: string[];
        })[]
      ] & {
        listings_: ([
          string,
          BigNumber,
          string,
          number,
          number,
          number,
          string,
          number,
          number,
          boolean,
          boolean,
          string,
          [number, number, number],
          number,
          number,
          string[]
        ] & {
          lender: string;
          initialCost: BigNumber;
          borrower: string;
          listingId: number;
          erc721TokenId: number;
          whitelistId: number;
          originalOwner: string;
          timeCreated: number;
          timeAgreed: number;
          canceled: boolean;
          completed: boolean;
          thirdParty: string;
          revenueSplit: [number, number, number];
          lastClaimed: number;
          period: number;
          revenueTokens: string[];
        })[];
      }
    >;

    getGotchiLendingsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLendingListingInfo(
      _listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          string,
          number,
          number,
          number,
          string,
          number,
          number,
          boolean,
          boolean,
          string,
          [number, number, number],
          number,
          number,
          string[]
        ] & {
          lender: string;
          initialCost: BigNumber;
          borrower: string;
          listingId: number;
          erc721TokenId: number;
          whitelistId: number;
          originalOwner: string;
          timeCreated: number;
          timeAgreed: number;
          canceled: boolean;
          completed: boolean;
          thirdParty: string;
          revenueSplit: [number, number, number];
          lastClaimed: number;
          period: number;
          revenueTokens: string[];
        }
      ] & {
        listing_: [
          string,
          BigNumber,
          string,
          number,
          number,
          number,
          string,
          number,
          number,
          boolean,
          boolean,
          string,
          [number, number, number],
          number,
          number,
          string[]
        ] & {
          lender: string;
          initialCost: BigNumber;
          borrower: string;
          listingId: number;
          erc721TokenId: number;
          whitelistId: number;
          originalOwner: string;
          timeCreated: number;
          timeAgreed: number;
          canceled: boolean;
          completed: boolean;
          thirdParty: string;
          revenueSplit: [number, number, number];
          lastClaimed: number;
          period: number;
          revenueTokens: string[];
        };
      }
    >;

    getLentTokenIdsOfLender(
      _lender: string,
      overrides?: CallOverrides
    ): Promise<[number[]] & { tokenIds_: number[] }>;

    getOwnerGotchiLendings(
      _lender: string,
      _status: BytesLike,
      _length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          string,
          number,
          number,
          number,
          string,
          number,
          number,
          boolean,
          boolean,
          string,
          [number, number, number],
          number,
          number,
          string[]
        ] & {
          lender: string;
          initialCost: BigNumber;
          borrower: string;
          listingId: number;
          erc721TokenId: number;
          whitelistId: number;
          originalOwner: string;
          timeCreated: number;
          timeAgreed: number;
          canceled: boolean;
          completed: boolean;
          thirdParty: string;
          revenueSplit: [number, number, number];
          lastClaimed: number;
          period: number;
          revenueTokens: string[];
        })[]
      ] & {
        listings_: ([
          string,
          BigNumber,
          string,
          number,
          number,
          number,
          string,
          number,
          number,
          boolean,
          boolean,
          string,
          [number, number, number],
          number,
          number,
          string[]
        ] & {
          lender: string;
          initialCost: BigNumber;
          borrower: string;
          listingId: number;
          erc721TokenId: number;
          whitelistId: number;
          originalOwner: string;
          timeCreated: number;
          timeAgreed: number;
          canceled: boolean;
          completed: boolean;
          thirdParty: string;
          revenueSplit: [number, number, number];
          lastClaimed: number;
          period: number;
          revenueTokens: string[];
        })[];
      }
    >;

    getOwnerGotchiLendingsLength(
      _lender: string,
      _status: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenBalancesInEscrow(
      _tokenId: BigNumberish,
      _revenueTokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { revenueBalances: BigNumber[] }>;

    isAavegotchiLent(
      _erc721TokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAavegotchiListed(
      _erc721TokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isLendingOperator(
      _lender: string,
      _lendingOperator: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revenueTokenAllowed(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setLendingOperator(
      _lendingOperator: string,
      _tokenId: BigNumberish,
      _isLendingOperator: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowRevenueTokens(
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOfLentGotchis(
    _lender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  batchSetLendingOperator(
    _lendingOperator: string,
    _inputs: { _tokenId: BigNumberish; _isLendingOperator: boolean }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disallowRevenueTokens(
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getGotchiLendingFromToken(
    _erc721TokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      number,
      number,
      number,
      string,
      number,
      number,
      boolean,
      boolean,
      string,
      [number, number, number],
      number,
      number,
      string[]
    ] & {
      lender: string;
      initialCost: BigNumber;
      borrower: string;
      listingId: number;
      erc721TokenId: number;
      whitelistId: number;
      originalOwner: string;
      timeCreated: number;
      timeAgreed: number;
      canceled: boolean;
      completed: boolean;
      thirdParty: string;
      revenueSplit: [number, number, number];
      lastClaimed: number;
      period: number;
      revenueTokens: string[];
    }
  >;

  getGotchiLendingIdByToken(
    _erc721TokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getGotchiLendingListingInfo(
    _listingId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        string,
        BigNumber,
        string,
        number,
        number,
        number,
        string,
        number,
        number,
        boolean,
        boolean,
        string,
        [number, number, number],
        number,
        number,
        string[]
      ] & {
        lender: string;
        initialCost: BigNumber;
        borrower: string;
        listingId: number;
        erc721TokenId: number;
        whitelistId: number;
        originalOwner: string;
        timeCreated: number;
        timeAgreed: number;
        canceled: boolean;
        completed: boolean;
        thirdParty: string;
        revenueSplit: [number, number, number];
        lastClaimed: number;
        period: number;
        revenueTokens: string[];
      },
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        [number, number, number, number, number, number],
        [number, number, number, number, number, number],
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ],
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        ([
          BigNumber,
          BigNumber,
          [
            string,
            string,
            string,
            [number, number, number, number, number, number],
            [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ],
            number[],
            [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            number,
            boolean,
            number,
            boolean,
            number,
            number,
            number
          ] & {
            name: string;
            description: string;
            author: string;
            traitModifiers: [number, number, number, number, number, number];
            slotPositions: [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ];
            allowedCollaterals: number[];
            dimensions: [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            };
            ghstPrice: BigNumber;
            maxQuantity: BigNumber;
            totalQuantity: BigNumber;
            svgId: number;
            rarityScoreModifier: number;
            canPurchaseWithGhst: boolean;
            minLevel: number;
            canBeTransferred: boolean;
            category: number;
            kinshipBonus: number;
            experienceBonus: number;
          }
        ] & {
          balance: BigNumber;
          itemId: BigNumber;
          itemType: [
            string,
            string,
            string,
            [number, number, number, number, number, number],
            [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ],
            number[],
            [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            number,
            boolean,
            number,
            boolean,
            number,
            number,
            number
          ] & {
            name: string;
            description: string;
            author: string;
            traitModifiers: [number, number, number, number, number, number];
            slotPositions: [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ];
            allowedCollaterals: number[];
            dimensions: [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            };
            ghstPrice: BigNumber;
            maxQuantity: BigNumber;
            totalQuantity: BigNumber;
            svgId: number;
            rarityScoreModifier: number;
            canPurchaseWithGhst: boolean;
            minLevel: number;
            canBeTransferred: boolean;
            category: number;
            kinshipBonus: number;
            experienceBonus: number;
          };
        })[]
      ] & {
        tokenId: BigNumber;
        name: string;
        owner: string;
        randomNumber: BigNumber;
        status: BigNumber;
        numericTraits: [number, number, number, number, number, number];
        modifiedNumericTraits: [number, number, number, number, number, number];
        equippedWearables: [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ];
        collateral: string;
        escrow: string;
        stakedAmount: BigNumber;
        minimumStake: BigNumber;
        kinship: BigNumber;
        lastInteracted: BigNumber;
        experience: BigNumber;
        toNextLevel: BigNumber;
        usedSkillPoints: BigNumber;
        level: BigNumber;
        hauntId: BigNumber;
        baseRarityScore: BigNumber;
        modifiedRarityScore: BigNumber;
        locked: boolean;
        items: ([
          BigNumber,
          BigNumber,
          [
            string,
            string,
            string,
            [number, number, number, number, number, number],
            [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ],
            number[],
            [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            number,
            boolean,
            number,
            boolean,
            number,
            number,
            number
          ] & {
            name: string;
            description: string;
            author: string;
            traitModifiers: [number, number, number, number, number, number];
            slotPositions: [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ];
            allowedCollaterals: number[];
            dimensions: [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            };
            ghstPrice: BigNumber;
            maxQuantity: BigNumber;
            totalQuantity: BigNumber;
            svgId: number;
            rarityScoreModifier: number;
            canPurchaseWithGhst: boolean;
            minLevel: number;
            canBeTransferred: boolean;
            category: number;
            kinshipBonus: number;
            experienceBonus: number;
          }
        ] & {
          balance: BigNumber;
          itemId: BigNumber;
          itemType: [
            string,
            string,
            string,
            [number, number, number, number, number, number],
            [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ],
            number[],
            [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            number,
            boolean,
            number,
            boolean,
            number,
            number,
            number
          ] & {
            name: string;
            description: string;
            author: string;
            traitModifiers: [number, number, number, number, number, number];
            slotPositions: [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ];
            allowedCollaterals: number[];
            dimensions: [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            };
            ghstPrice: BigNumber;
            maxQuantity: BigNumber;
            totalQuantity: BigNumber;
            svgId: number;
            rarityScoreModifier: number;
            canPurchaseWithGhst: boolean;
            minLevel: number;
            canBeTransferred: boolean;
            category: number;
            kinshipBonus: number;
            experienceBonus: number;
          };
        })[];
      }
    ] & {
      listing_: [
        string,
        BigNumber,
        string,
        number,
        number,
        number,
        string,
        number,
        number,
        boolean,
        boolean,
        string,
        [number, number, number],
        number,
        number,
        string[]
      ] & {
        lender: string;
        initialCost: BigNumber;
        borrower: string;
        listingId: number;
        erc721TokenId: number;
        whitelistId: number;
        originalOwner: string;
        timeCreated: number;
        timeAgreed: number;
        canceled: boolean;
        completed: boolean;
        thirdParty: string;
        revenueSplit: [number, number, number];
        lastClaimed: number;
        period: number;
        revenueTokens: string[];
      };
      aavegotchiInfo_: [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        [number, number, number, number, number, number],
        [number, number, number, number, number, number],
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ],
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        ([
          BigNumber,
          BigNumber,
          [
            string,
            string,
            string,
            [number, number, number, number, number, number],
            [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ],
            number[],
            [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            number,
            boolean,
            number,
            boolean,
            number,
            number,
            number
          ] & {
            name: string;
            description: string;
            author: string;
            traitModifiers: [number, number, number, number, number, number];
            slotPositions: [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ];
            allowedCollaterals: number[];
            dimensions: [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            };
            ghstPrice: BigNumber;
            maxQuantity: BigNumber;
            totalQuantity: BigNumber;
            svgId: number;
            rarityScoreModifier: number;
            canPurchaseWithGhst: boolean;
            minLevel: number;
            canBeTransferred: boolean;
            category: number;
            kinshipBonus: number;
            experienceBonus: number;
          }
        ] & {
          balance: BigNumber;
          itemId: BigNumber;
          itemType: [
            string,
            string,
            string,
            [number, number, number, number, number, number],
            [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ],
            number[],
            [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            number,
            boolean,
            number,
            boolean,
            number,
            number,
            number
          ] & {
            name: string;
            description: string;
            author: string;
            traitModifiers: [number, number, number, number, number, number];
            slotPositions: [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ];
            allowedCollaterals: number[];
            dimensions: [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            };
            ghstPrice: BigNumber;
            maxQuantity: BigNumber;
            totalQuantity: BigNumber;
            svgId: number;
            rarityScoreModifier: number;
            canPurchaseWithGhst: boolean;
            minLevel: number;
            canBeTransferred: boolean;
            category: number;
            kinshipBonus: number;
            experienceBonus: number;
          };
        })[]
      ] & {
        tokenId: BigNumber;
        name: string;
        owner: string;
        randomNumber: BigNumber;
        status: BigNumber;
        numericTraits: [number, number, number, number, number, number];
        modifiedNumericTraits: [number, number, number, number, number, number];
        equippedWearables: [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ];
        collateral: string;
        escrow: string;
        stakedAmount: BigNumber;
        minimumStake: BigNumber;
        kinship: BigNumber;
        lastInteracted: BigNumber;
        experience: BigNumber;
        toNextLevel: BigNumber;
        usedSkillPoints: BigNumber;
        level: BigNumber;
        hauntId: BigNumber;
        baseRarityScore: BigNumber;
        modifiedRarityScore: BigNumber;
        locked: boolean;
        items: ([
          BigNumber,
          BigNumber,
          [
            string,
            string,
            string,
            [number, number, number, number, number, number],
            [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ],
            number[],
            [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            number,
            boolean,
            number,
            boolean,
            number,
            number,
            number
          ] & {
            name: string;
            description: string;
            author: string;
            traitModifiers: [number, number, number, number, number, number];
            slotPositions: [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ];
            allowedCollaterals: number[];
            dimensions: [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            };
            ghstPrice: BigNumber;
            maxQuantity: BigNumber;
            totalQuantity: BigNumber;
            svgId: number;
            rarityScoreModifier: number;
            canPurchaseWithGhst: boolean;
            minLevel: number;
            canBeTransferred: boolean;
            category: number;
            kinshipBonus: number;
            experienceBonus: number;
          }
        ] & {
          balance: BigNumber;
          itemId: BigNumber;
          itemType: [
            string,
            string,
            string,
            [number, number, number, number, number, number],
            [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ],
            number[],
            [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            number,
            boolean,
            number,
            boolean,
            number,
            number,
            number
          ] & {
            name: string;
            description: string;
            author: string;
            traitModifiers: [number, number, number, number, number, number];
            slotPositions: [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ];
            allowedCollaterals: number[];
            dimensions: [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            };
            ghstPrice: BigNumber;
            maxQuantity: BigNumber;
            totalQuantity: BigNumber;
            svgId: number;
            rarityScoreModifier: number;
            canPurchaseWithGhst: boolean;
            minLevel: number;
            canBeTransferred: boolean;
            category: number;
            kinshipBonus: number;
            experienceBonus: number;
          };
        })[];
      };
    }
  >;

  getGotchiLendings(
    _status: BytesLike,
    _length: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      string,
      number,
      number,
      number,
      string,
      number,
      number,
      boolean,
      boolean,
      string,
      [number, number, number],
      number,
      number,
      string[]
    ] & {
      lender: string;
      initialCost: BigNumber;
      borrower: string;
      listingId: number;
      erc721TokenId: number;
      whitelistId: number;
      originalOwner: string;
      timeCreated: number;
      timeAgreed: number;
      canceled: boolean;
      completed: boolean;
      thirdParty: string;
      revenueSplit: [number, number, number];
      lastClaimed: number;
      period: number;
      revenueTokens: string[];
    })[]
  >;

  getGotchiLendingsLength(overrides?: CallOverrides): Promise<BigNumber>;

  getLendingListingInfo(
    _listingId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      number,
      number,
      number,
      string,
      number,
      number,
      boolean,
      boolean,
      string,
      [number, number, number],
      number,
      number,
      string[]
    ] & {
      lender: string;
      initialCost: BigNumber;
      borrower: string;
      listingId: number;
      erc721TokenId: number;
      whitelistId: number;
      originalOwner: string;
      timeCreated: number;
      timeAgreed: number;
      canceled: boolean;
      completed: boolean;
      thirdParty: string;
      revenueSplit: [number, number, number];
      lastClaimed: number;
      period: number;
      revenueTokens: string[];
    }
  >;

  getLentTokenIdsOfLender(
    _lender: string,
    overrides?: CallOverrides
  ): Promise<number[]>;

  getOwnerGotchiLendings(
    _lender: string,
    _status: BytesLike,
    _length: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      string,
      number,
      number,
      number,
      string,
      number,
      number,
      boolean,
      boolean,
      string,
      [number, number, number],
      number,
      number,
      string[]
    ] & {
      lender: string;
      initialCost: BigNumber;
      borrower: string;
      listingId: number;
      erc721TokenId: number;
      whitelistId: number;
      originalOwner: string;
      timeCreated: number;
      timeAgreed: number;
      canceled: boolean;
      completed: boolean;
      thirdParty: string;
      revenueSplit: [number, number, number];
      lastClaimed: number;
      period: number;
      revenueTokens: string[];
    })[]
  >;

  getOwnerGotchiLendingsLength(
    _lender: string,
    _status: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenBalancesInEscrow(
    _tokenId: BigNumberish,
    _revenueTokens: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  isAavegotchiLent(
    _erc721TokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAavegotchiListed(
    _erc721TokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isLendingOperator(
    _lender: string,
    _lendingOperator: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  revenueTokenAllowed(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setLendingOperator(
    _lendingOperator: string,
    _tokenId: BigNumberish,
    _isLendingOperator: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowRevenueTokens(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOfLentGotchis(
      _lender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchSetLendingOperator(
      _lendingOperator: string,
      _inputs: { _tokenId: BigNumberish; _isLendingOperator: boolean }[],
      overrides?: CallOverrides
    ): Promise<void>;

    disallowRevenueTokens(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getGotchiLendingFromToken(
      _erc721TokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        number,
        number,
        number,
        string,
        number,
        number,
        boolean,
        boolean,
        string,
        [number, number, number],
        number,
        number,
        string[]
      ] & {
        lender: string;
        initialCost: BigNumber;
        borrower: string;
        listingId: number;
        erc721TokenId: number;
        whitelistId: number;
        originalOwner: string;
        timeCreated: number;
        timeAgreed: number;
        canceled: boolean;
        completed: boolean;
        thirdParty: string;
        revenueSplit: [number, number, number];
        lastClaimed: number;
        period: number;
        revenueTokens: string[];
      }
    >;

    getGotchiLendingIdByToken(
      _erc721TokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getGotchiLendingListingInfo(
      _listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          string,
          number,
          number,
          number,
          string,
          number,
          number,
          boolean,
          boolean,
          string,
          [number, number, number],
          number,
          number,
          string[]
        ] & {
          lender: string;
          initialCost: BigNumber;
          borrower: string;
          listingId: number;
          erc721TokenId: number;
          whitelistId: number;
          originalOwner: string;
          timeCreated: number;
          timeAgreed: number;
          canceled: boolean;
          completed: boolean;
          thirdParty: string;
          revenueSplit: [number, number, number];
          lastClaimed: number;
          period: number;
          revenueTokens: string[];
        },
        [
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          [number, number, number, number, number, number],
          [number, number, number, number, number, number],
          [
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number
          ],
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          ([
            BigNumber,
            BigNumber,
            [
              string,
              string,
              string,
              [number, number, number, number, number, number],
              [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ],
              number[],
              [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              },
              BigNumber,
              BigNumber,
              BigNumber,
              number,
              number,
              boolean,
              number,
              boolean,
              number,
              number,
              number
            ] & {
              name: string;
              description: string;
              author: string;
              traitModifiers: [number, number, number, number, number, number];
              slotPositions: [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ];
              allowedCollaterals: number[];
              dimensions: [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              };
              ghstPrice: BigNumber;
              maxQuantity: BigNumber;
              totalQuantity: BigNumber;
              svgId: number;
              rarityScoreModifier: number;
              canPurchaseWithGhst: boolean;
              minLevel: number;
              canBeTransferred: boolean;
              category: number;
              kinshipBonus: number;
              experienceBonus: number;
            }
          ] & {
            balance: BigNumber;
            itemId: BigNumber;
            itemType: [
              string,
              string,
              string,
              [number, number, number, number, number, number],
              [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ],
              number[],
              [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              },
              BigNumber,
              BigNumber,
              BigNumber,
              number,
              number,
              boolean,
              number,
              boolean,
              number,
              number,
              number
            ] & {
              name: string;
              description: string;
              author: string;
              traitModifiers: [number, number, number, number, number, number];
              slotPositions: [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ];
              allowedCollaterals: number[];
              dimensions: [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              };
              ghstPrice: BigNumber;
              maxQuantity: BigNumber;
              totalQuantity: BigNumber;
              svgId: number;
              rarityScoreModifier: number;
              canPurchaseWithGhst: boolean;
              minLevel: number;
              canBeTransferred: boolean;
              category: number;
              kinshipBonus: number;
              experienceBonus: number;
            };
          })[]
        ] & {
          tokenId: BigNumber;
          name: string;
          owner: string;
          randomNumber: BigNumber;
          status: BigNumber;
          numericTraits: [number, number, number, number, number, number];
          modifiedNumericTraits: [
            number,
            number,
            number,
            number,
            number,
            number
          ];
          equippedWearables: [
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number
          ];
          collateral: string;
          escrow: string;
          stakedAmount: BigNumber;
          minimumStake: BigNumber;
          kinship: BigNumber;
          lastInteracted: BigNumber;
          experience: BigNumber;
          toNextLevel: BigNumber;
          usedSkillPoints: BigNumber;
          level: BigNumber;
          hauntId: BigNumber;
          baseRarityScore: BigNumber;
          modifiedRarityScore: BigNumber;
          locked: boolean;
          items: ([
            BigNumber,
            BigNumber,
            [
              string,
              string,
              string,
              [number, number, number, number, number, number],
              [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ],
              number[],
              [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              },
              BigNumber,
              BigNumber,
              BigNumber,
              number,
              number,
              boolean,
              number,
              boolean,
              number,
              number,
              number
            ] & {
              name: string;
              description: string;
              author: string;
              traitModifiers: [number, number, number, number, number, number];
              slotPositions: [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ];
              allowedCollaterals: number[];
              dimensions: [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              };
              ghstPrice: BigNumber;
              maxQuantity: BigNumber;
              totalQuantity: BigNumber;
              svgId: number;
              rarityScoreModifier: number;
              canPurchaseWithGhst: boolean;
              minLevel: number;
              canBeTransferred: boolean;
              category: number;
              kinshipBonus: number;
              experienceBonus: number;
            }
          ] & {
            balance: BigNumber;
            itemId: BigNumber;
            itemType: [
              string,
              string,
              string,
              [number, number, number, number, number, number],
              [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ],
              number[],
              [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              },
              BigNumber,
              BigNumber,
              BigNumber,
              number,
              number,
              boolean,
              number,
              boolean,
              number,
              number,
              number
            ] & {
              name: string;
              description: string;
              author: string;
              traitModifiers: [number, number, number, number, number, number];
              slotPositions: [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ];
              allowedCollaterals: number[];
              dimensions: [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              };
              ghstPrice: BigNumber;
              maxQuantity: BigNumber;
              totalQuantity: BigNumber;
              svgId: number;
              rarityScoreModifier: number;
              canPurchaseWithGhst: boolean;
              minLevel: number;
              canBeTransferred: boolean;
              category: number;
              kinshipBonus: number;
              experienceBonus: number;
            };
          })[];
        }
      ] & {
        listing_: [
          string,
          BigNumber,
          string,
          number,
          number,
          number,
          string,
          number,
          number,
          boolean,
          boolean,
          string,
          [number, number, number],
          number,
          number,
          string[]
        ] & {
          lender: string;
          initialCost: BigNumber;
          borrower: string;
          listingId: number;
          erc721TokenId: number;
          whitelistId: number;
          originalOwner: string;
          timeCreated: number;
          timeAgreed: number;
          canceled: boolean;
          completed: boolean;
          thirdParty: string;
          revenueSplit: [number, number, number];
          lastClaimed: number;
          period: number;
          revenueTokens: string[];
        };
        aavegotchiInfo_: [
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          [number, number, number, number, number, number],
          [number, number, number, number, number, number],
          [
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number
          ],
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          ([
            BigNumber,
            BigNumber,
            [
              string,
              string,
              string,
              [number, number, number, number, number, number],
              [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ],
              number[],
              [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              },
              BigNumber,
              BigNumber,
              BigNumber,
              number,
              number,
              boolean,
              number,
              boolean,
              number,
              number,
              number
            ] & {
              name: string;
              description: string;
              author: string;
              traitModifiers: [number, number, number, number, number, number];
              slotPositions: [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ];
              allowedCollaterals: number[];
              dimensions: [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              };
              ghstPrice: BigNumber;
              maxQuantity: BigNumber;
              totalQuantity: BigNumber;
              svgId: number;
              rarityScoreModifier: number;
              canPurchaseWithGhst: boolean;
              minLevel: number;
              canBeTransferred: boolean;
              category: number;
              kinshipBonus: number;
              experienceBonus: number;
            }
          ] & {
            balance: BigNumber;
            itemId: BigNumber;
            itemType: [
              string,
              string,
              string,
              [number, number, number, number, number, number],
              [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ],
              number[],
              [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              },
              BigNumber,
              BigNumber,
              BigNumber,
              number,
              number,
              boolean,
              number,
              boolean,
              number,
              number,
              number
            ] & {
              name: string;
              description: string;
              author: string;
              traitModifiers: [number, number, number, number, number, number];
              slotPositions: [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ];
              allowedCollaterals: number[];
              dimensions: [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              };
              ghstPrice: BigNumber;
              maxQuantity: BigNumber;
              totalQuantity: BigNumber;
              svgId: number;
              rarityScoreModifier: number;
              canPurchaseWithGhst: boolean;
              minLevel: number;
              canBeTransferred: boolean;
              category: number;
              kinshipBonus: number;
              experienceBonus: number;
            };
          })[]
        ] & {
          tokenId: BigNumber;
          name: string;
          owner: string;
          randomNumber: BigNumber;
          status: BigNumber;
          numericTraits: [number, number, number, number, number, number];
          modifiedNumericTraits: [
            number,
            number,
            number,
            number,
            number,
            number
          ];
          equippedWearables: [
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number
          ];
          collateral: string;
          escrow: string;
          stakedAmount: BigNumber;
          minimumStake: BigNumber;
          kinship: BigNumber;
          lastInteracted: BigNumber;
          experience: BigNumber;
          toNextLevel: BigNumber;
          usedSkillPoints: BigNumber;
          level: BigNumber;
          hauntId: BigNumber;
          baseRarityScore: BigNumber;
          modifiedRarityScore: BigNumber;
          locked: boolean;
          items: ([
            BigNumber,
            BigNumber,
            [
              string,
              string,
              string,
              [number, number, number, number, number, number],
              [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ],
              number[],
              [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              },
              BigNumber,
              BigNumber,
              BigNumber,
              number,
              number,
              boolean,
              number,
              boolean,
              number,
              number,
              number
            ] & {
              name: string;
              description: string;
              author: string;
              traitModifiers: [number, number, number, number, number, number];
              slotPositions: [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ];
              allowedCollaterals: number[];
              dimensions: [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              };
              ghstPrice: BigNumber;
              maxQuantity: BigNumber;
              totalQuantity: BigNumber;
              svgId: number;
              rarityScoreModifier: number;
              canPurchaseWithGhst: boolean;
              minLevel: number;
              canBeTransferred: boolean;
              category: number;
              kinshipBonus: number;
              experienceBonus: number;
            }
          ] & {
            balance: BigNumber;
            itemId: BigNumber;
            itemType: [
              string,
              string,
              string,
              [number, number, number, number, number, number],
              [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ],
              number[],
              [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              },
              BigNumber,
              BigNumber,
              BigNumber,
              number,
              number,
              boolean,
              number,
              boolean,
              number,
              number,
              number
            ] & {
              name: string;
              description: string;
              author: string;
              traitModifiers: [number, number, number, number, number, number];
              slotPositions: [
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean,
                boolean
              ];
              allowedCollaterals: number[];
              dimensions: [number, number, number, number] & {
                x: number;
                y: number;
                width: number;
                height: number;
              };
              ghstPrice: BigNumber;
              maxQuantity: BigNumber;
              totalQuantity: BigNumber;
              svgId: number;
              rarityScoreModifier: number;
              canPurchaseWithGhst: boolean;
              minLevel: number;
              canBeTransferred: boolean;
              category: number;
              kinshipBonus: number;
              experienceBonus: number;
            };
          })[];
        };
      }
    >;

    getGotchiLendings(
      _status: BytesLike,
      _length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        string,
        number,
        number,
        number,
        string,
        number,
        number,
        boolean,
        boolean,
        string,
        [number, number, number],
        number,
        number,
        string[]
      ] & {
        lender: string;
        initialCost: BigNumber;
        borrower: string;
        listingId: number;
        erc721TokenId: number;
        whitelistId: number;
        originalOwner: string;
        timeCreated: number;
        timeAgreed: number;
        canceled: boolean;
        completed: boolean;
        thirdParty: string;
        revenueSplit: [number, number, number];
        lastClaimed: number;
        period: number;
        revenueTokens: string[];
      })[]
    >;

    getGotchiLendingsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getLendingListingInfo(
      _listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        number,
        number,
        number,
        string,
        number,
        number,
        boolean,
        boolean,
        string,
        [number, number, number],
        number,
        number,
        string[]
      ] & {
        lender: string;
        initialCost: BigNumber;
        borrower: string;
        listingId: number;
        erc721TokenId: number;
        whitelistId: number;
        originalOwner: string;
        timeCreated: number;
        timeAgreed: number;
        canceled: boolean;
        completed: boolean;
        thirdParty: string;
        revenueSplit: [number, number, number];
        lastClaimed: number;
        period: number;
        revenueTokens: string[];
      }
    >;

    getLentTokenIdsOfLender(
      _lender: string,
      overrides?: CallOverrides
    ): Promise<number[]>;

    getOwnerGotchiLendings(
      _lender: string,
      _status: BytesLike,
      _length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        string,
        number,
        number,
        number,
        string,
        number,
        number,
        boolean,
        boolean,
        string,
        [number, number, number],
        number,
        number,
        string[]
      ] & {
        lender: string;
        initialCost: BigNumber;
        borrower: string;
        listingId: number;
        erc721TokenId: number;
        whitelistId: number;
        originalOwner: string;
        timeCreated: number;
        timeAgreed: number;
        canceled: boolean;
        completed: boolean;
        thirdParty: string;
        revenueSplit: [number, number, number];
        lastClaimed: number;
        period: number;
        revenueTokens: string[];
      })[]
    >;

    getOwnerGotchiLendingsLength(
      _lender: string,
      _status: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenBalancesInEscrow(
      _tokenId: BigNumberish,
      _revenueTokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    isAavegotchiLent(
      _erc721TokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAavegotchiListed(
      _erc721TokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLendingOperator(
      _lender: string,
      _lendingOperator: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revenueTokenAllowed(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setLendingOperator(
      _lendingOperator: string,
      _tokenId: BigNumberish,
      _isLendingOperator: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LendingOperatorSet(address,address,uint32,bool)"(
      lender?: string | null,
      lendingOperator?: string | null,
      tokenId?: BigNumberish | null,
      isLendingOperator?: null
    ): TypedEventFilter<
      [string, string, number, boolean],
      {
        lender: string;
        lendingOperator: string;
        tokenId: number;
        isLendingOperator: boolean;
      }
    >;

    LendingOperatorSet(
      lender?: string | null,
      lendingOperator?: string | null,
      tokenId?: BigNumberish | null,
      isLendingOperator?: null
    ): TypedEventFilter<
      [string, string, number, boolean],
      {
        lender: string;
        lendingOperator: string;
        tokenId: number;
        isLendingOperator: boolean;
      }
    >;
  };

  estimateGas: {
    allowRevenueTokens(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOfLentGotchis(
      _lender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchSetLendingOperator(
      _lendingOperator: string,
      _inputs: { _tokenId: BigNumberish; _isLendingOperator: boolean }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disallowRevenueTokens(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getGotchiLendingFromToken(
      _erc721TokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGotchiLendingIdByToken(
      _erc721TokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGotchiLendingListingInfo(
      _listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGotchiLendings(
      _status: BytesLike,
      _length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGotchiLendingsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getLendingListingInfo(
      _listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLentTokenIdsOfLender(
      _lender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnerGotchiLendings(
      _lender: string,
      _status: BytesLike,
      _length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnerGotchiLendingsLength(
      _lender: string,
      _status: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenBalancesInEscrow(
      _tokenId: BigNumberish,
      _revenueTokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAavegotchiLent(
      _erc721TokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAavegotchiListed(
      _erc721TokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLendingOperator(
      _lender: string,
      _lendingOperator: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revenueTokenAllowed(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setLendingOperator(
      _lendingOperator: string,
      _tokenId: BigNumberish,
      _isLendingOperator: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowRevenueTokens(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOfLentGotchis(
      _lender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchSetLendingOperator(
      _lendingOperator: string,
      _inputs: { _tokenId: BigNumberish; _isLendingOperator: boolean }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disallowRevenueTokens(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getGotchiLendingFromToken(
      _erc721TokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGotchiLendingIdByToken(
      _erc721TokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGotchiLendingListingInfo(
      _listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGotchiLendings(
      _status: BytesLike,
      _length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGotchiLendingsLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLendingListingInfo(
      _listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLentTokenIdsOfLender(
      _lender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnerGotchiLendings(
      _lender: string,
      _status: BytesLike,
      _length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnerGotchiLendingsLength(
      _lender: string,
      _status: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenBalancesInEscrow(
      _tokenId: BigNumberish,
      _revenueTokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAavegotchiLent(
      _erc721TokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAavegotchiListed(
      _erc721TokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLendingOperator(
      _lender: string,
      _lendingOperator: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revenueTokenAllowed(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setLendingOperator(
      _lendingOperator: string,
      _tokenId: BigNumberish,
      _isLendingOperator: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
