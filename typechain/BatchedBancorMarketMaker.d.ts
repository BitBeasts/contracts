/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BatchedBancorMarketMakerInterface extends ethers.utils.Interface {
  functions: {
    "hasInitialized()": FunctionFragment;
    "updateBeneficiary(address)": FunctionFragment;
    "PPM()": FunctionFragment;
    "UPDATE_FORMULA_ROLE()": FunctionFragment;
    "openSellOrder(address,address,uint256)": FunctionFragment;
    "metaBatches(uint256)": FunctionFragment;
    "getEVMScriptExecutor(bytes)": FunctionFragment;
    "tokenManager()": FunctionFragment;
    "OPEN_BUY_ORDER_ROLE()": FunctionFragment;
    "UPDATE_COLLATERAL_TOKEN_ROLE()": FunctionFragment;
    "getRecoveryVault()": FunctionFragment;
    "beneficiary()": FunctionFragment;
    "openBuyOrder(address,address,uint256)": FunctionFragment;
    "UPDATE_BENEFICIARY_ROLE()": FunctionFragment;
    "isOpen()": FunctionFragment;
    "collateralsToBeClaimed(address)": FunctionFragment;
    "formula()": FunctionFragment;
    "claimSellOrder(address,uint256,address)": FunctionFragment;
    "ADD_COLLATERAL_TOKEN_ROLE()": FunctionFragment;
    "UPDATE_FEES_ROLE()": FunctionFragment;
    "getBatch(uint256,address)": FunctionFragment;
    "OPEN_ROLE()": FunctionFragment;
    "updateFees(uint256,uint256)": FunctionFragment;
    "initialize(address,address,address,address,address,uint256,uint256,uint256)": FunctionFragment;
    "claimBuyOrder(address,uint256,address)": FunctionFragment;
    "sellFeePct()": FunctionFragment;
    "getStaticPricePPM(uint256,uint256,uint32)": FunctionFragment;
    "allowRecoverability(address)": FunctionFragment;
    "appId()": FunctionFragment;
    "updateCollateralToken(address,uint256,uint256,uint32,uint256)": FunctionFragment;
    "getInitializationBlock()": FunctionFragment;
    "claimCancelledBuyOrder(address,uint256,address)": FunctionFragment;
    "removeCollateralToken(address)": FunctionFragment;
    "tokensToBeMinted()": FunctionFragment;
    "transferToVault(address)": FunctionFragment;
    "canPerform(address,bytes32,uint256[])": FunctionFragment;
    "getEVMScriptRegistry()": FunctionFragment;
    "REMOVE_COLLATERAL_TOKEN_ROLE()": FunctionFragment;
    "batchBlocks()": FunctionFragment;
    "reserve()": FunctionFragment;
    "OPEN_SELL_ORDER_ROLE()": FunctionFragment;
    "kernel()": FunctionFragment;
    "updateFormula(address)": FunctionFragment;
    "claimCancelledSellOrder(address,uint256,address)": FunctionFragment;
    "isPetrified()": FunctionFragment;
    "getCurrentBatchId()": FunctionFragment;
    "collaterals(address)": FunctionFragment;
    "getCollateralToken(address)": FunctionFragment;
    "controller()": FunctionFragment;
    "buyFeePct()": FunctionFragment;
    "token()": FunctionFragment;
    "PCT_BASE()": FunctionFragment;
    "open()": FunctionFragment;
    "addCollateralToken(address,uint256,uint256,uint32,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "hasInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateBeneficiary",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "PPM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UPDATE_FORMULA_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openSellOrder",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "metaBatches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptExecutor",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPEN_BUY_ORDER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATE_COLLATERAL_TOKEN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoveryVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openBuyOrder",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATE_BENEFICIARY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOpen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collateralsToBeClaimed",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "formula", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimSellOrder",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ADD_COLLATERAL_TOKEN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATE_FEES_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBatch",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "OPEN_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBuyOrder",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sellFeePct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStaticPricePPM",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowRecoverability",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateCollateralToken",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimCancelledBuyOrder",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateralToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensToBeMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferToVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "canPerform",
    values: [string, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REMOVE_COLLATERAL_TOKEN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reserve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "OPEN_SELL_ORDER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateFormula",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCancelledSellOrder",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPetrified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBatchId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "collaterals", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getCollateralToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buyFeePct", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "PCT_BASE", values?: undefined): string;
  encodeFunctionData(functionFragment: "open", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addCollateralToken",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "hasInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PPM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_FORMULA_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metaBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPEN_BUY_ORDER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_COLLATERAL_TOKEN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_BENEFICIARY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOpen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralsToBeClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "formula", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ADD_COLLATERAL_TOKEN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_FEES_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "OPEN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellFeePct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStaticPricePPM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowRecoverability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCancelledBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensToBeMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canPerform", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REMOVE_COLLATERAL_TOKEN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "OPEN_SELL_ORDER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFormula",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCancelledSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPetrified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBatchId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collaterals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyFeePct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PCT_BASE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addCollateralToken",
    data: BytesLike
  ): Result;

  events: {
    "UpdateBeneficiary(address)": EventFragment;
    "UpdateFormula(address)": EventFragment;
    "UpdateFees(uint256,uint256)": EventFragment;
    "NewMetaBatch(uint256,uint256,uint256,uint256,address)": EventFragment;
    "NewBatch(uint256,address,uint256,uint256,uint32,uint256)": EventFragment;
    "CancelBatch(uint256,address)": EventFragment;
    "AddCollateralToken(address,uint256,uint256,uint32,uint256)": EventFragment;
    "RemoveCollateralToken(address)": EventFragment;
    "UpdateCollateralToken(address,uint256,uint256,uint32,uint256)": EventFragment;
    "Open()": EventFragment;
    "OpenBuyOrder(address,uint256,address,uint256,uint256)": EventFragment;
    "OpenSellOrder(address,uint256,address,uint256)": EventFragment;
    "ClaimBuyOrder(address,uint256,address,uint256)": EventFragment;
    "ClaimSellOrder(address,uint256,address,uint256,uint256)": EventFragment;
    "ClaimCancelledBuyOrder(address,uint256,address,uint256)": EventFragment;
    "ClaimCancelledSellOrder(address,uint256,address,uint256)": EventFragment;
    "UpdatePricing(uint256,address,uint256,uint256,uint256,uint256)": EventFragment;
    "ScriptResult(address,bytes,bytes,bytes)": EventFragment;
    "RecoverToVault(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UpdateBeneficiary"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFormula"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMetaBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddCollateralToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveCollateralToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateCollateralToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Open"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenBuyOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenSellOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimBuyOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimSellOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimCancelledBuyOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimCancelledSellOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePricing"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScriptResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoverToVault"): EventFragment;
}

export type UpdateBeneficiaryEvent = TypedEvent<
  [string] & { beneficiary: string }
>;

export type UpdateFormulaEvent = TypedEvent<[string] & { formula: string }>;

export type UpdateFeesEvent = TypedEvent<
  [BigNumber, BigNumber] & { buyFeePct: BigNumber; sellFeePct: BigNumber }
>;

export type NewMetaBatchEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
    id: BigNumber;
    supply: BigNumber;
    buyFeePct: BigNumber;
    sellFeePct: BigNumber;
    formula: string;
  }
>;

export type NewBatchEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, number, BigNumber] & {
    id: BigNumber;
    collateral: string;
    supply: BigNumber;
    balance: BigNumber;
    reserveRatio: number;
    slippage: BigNumber;
  }
>;

export type CancelBatchEvent = TypedEvent<
  [BigNumber, string] & { id: BigNumber; collateral: string }
>;

export type AddCollateralTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber, number, BigNumber] & {
    collateral: string;
    virtualSupply: BigNumber;
    virtualBalance: BigNumber;
    reserveRatio: number;
    slippage: BigNumber;
  }
>;

export type RemoveCollateralTokenEvent = TypedEvent<
  [string] & { collateral: string }
>;

export type UpdateCollateralTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber, number, BigNumber] & {
    collateral: string;
    virtualSupply: BigNumber;
    virtualBalance: BigNumber;
    reserveRatio: number;
    slippage: BigNumber;
  }
>;

export type OpenEvent = TypedEvent<[] & {}>;

export type OpenBuyOrderEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber] & {
    buyer: string;
    batchId: BigNumber;
    collateral: string;
    fee: BigNumber;
    value: BigNumber;
  }
>;

export type OpenSellOrderEvent = TypedEvent<
  [string, BigNumber, string, BigNumber] & {
    seller: string;
    batchId: BigNumber;
    collateral: string;
    amount: BigNumber;
  }
>;

export type ClaimBuyOrderEvent = TypedEvent<
  [string, BigNumber, string, BigNumber] & {
    buyer: string;
    batchId: BigNumber;
    collateral: string;
    amount: BigNumber;
  }
>;

export type ClaimSellOrderEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber] & {
    seller: string;
    batchId: BigNumber;
    collateral: string;
    fee: BigNumber;
    value: BigNumber;
  }
>;

export type ClaimCancelledBuyOrderEvent = TypedEvent<
  [string, BigNumber, string, BigNumber] & {
    buyer: string;
    batchId: BigNumber;
    collateral: string;
    value: BigNumber;
  }
>;

export type ClaimCancelledSellOrderEvent = TypedEvent<
  [string, BigNumber, string, BigNumber] & {
    seller: string;
    batchId: BigNumber;
    collateral: string;
    amount: BigNumber;
  }
>;

export type UpdatePricingEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    batchId: BigNumber;
    collateral: string;
    totalBuySpend: BigNumber;
    totalBuyReturn: BigNumber;
    totalSellSpend: BigNumber;
    totalSellReturn: BigNumber;
  }
>;

export type ScriptResultEvent = TypedEvent<
  [string, string, string, string] & {
    executor: string;
    script: string;
    input: string;
    returnData: string;
  }
>;

export type RecoverToVaultEvent = TypedEvent<
  [string, string, BigNumber] & {
    vault: string;
    token: string;
    amount: BigNumber;
  }
>;

export class BatchedBancorMarketMaker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BatchedBancorMarketMakerInterface;

  functions: {
    hasInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    updateBeneficiary(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    PPM(overrides?: CallOverrides): Promise<[number]>;

    UPDATE_FORMULA_ROLE(overrides?: CallOverrides): Promise<[string]>;

    openSellOrder(
      _seller: string,
      _collateral: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    metaBatches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, string] & {
        initialized: boolean;
        realSupply: BigNumber;
        buyFeePct: BigNumber;
        sellFeePct: BigNumber;
        formula: string;
      }
    >;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenManager(overrides?: CallOverrides): Promise<[string]>;

    OPEN_BUY_ORDER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UPDATE_COLLATERAL_TOKEN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    getRecoveryVault(overrides?: CallOverrides): Promise<[string]>;

    beneficiary(overrides?: CallOverrides): Promise<[string]>;

    openBuyOrder(
      _buyer: string,
      _collateral: string,
      _value: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    UPDATE_BENEFICIARY_ROLE(overrides?: CallOverrides): Promise<[string]>;

    isOpen(overrides?: CallOverrides): Promise<[boolean]>;

    collateralsToBeClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    formula(overrides?: CallOverrides): Promise<[string]>;

    claimSellOrder(
      _seller: string,
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ADD_COLLATERAL_TOKEN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UPDATE_FEES_ROLE(overrides?: CallOverrides): Promise<[string]>;

    getBatch(
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    OPEN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    updateFees(
      _buyFeePct: BigNumberish,
      _sellFeePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _controller: string,
      _tokenManager: string,
      _formula: string,
      _reserve: string,
      _beneficiary: string,
      _batchBlocks: BigNumberish,
      _buyFeePct: BigNumberish,
      _sellFeePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimBuyOrder(
      _buyer: string,
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellFeePct(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStaticPricePPM(
      _supply: BigNumberish,
      _balance: BigNumberish,
      _reserveRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    appId(overrides?: CallOverrides): Promise<[string]>;

    updateCollateralToken(
      _collateral: string,
      _virtualSupply: BigNumberish,
      _virtualBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getInitializationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimCancelledBuyOrder(
      _buyer: string,
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeCollateralToken(
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokensToBeMinted(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<[string]>;

    REMOVE_COLLATERAL_TOKEN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    batchBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    reserve(overrides?: CallOverrides): Promise<[string]>;

    OPEN_SELL_ORDER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    updateFormula(
      _formula: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimCancelledSellOrder(
      _seller: string,
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isPetrified(overrides?: CallOverrides): Promise<[boolean]>;

    getCurrentBatchId(overrides?: CallOverrides): Promise<[BigNumber]>;

    collaterals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, number, BigNumber] & {
        whitelisted: boolean;
        virtualSupply: BigNumber;
        virtualBalance: BigNumber;
        reserveRatio: number;
        slippage: BigNumber;
      }
    >;

    getCollateralToken(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber, number, BigNumber]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    buyFeePct(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    PCT_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    open(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addCollateralToken(
      _collateral: string,
      _virtualSupply: BigNumberish,
      _virtualBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  hasInitialized(overrides?: CallOverrides): Promise<boolean>;

  updateBeneficiary(
    _beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  PPM(overrides?: CallOverrides): Promise<number>;

  UPDATE_FORMULA_ROLE(overrides?: CallOverrides): Promise<string>;

  openSellOrder(
    _seller: string,
    _collateral: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  metaBatches(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, string] & {
      initialized: boolean;
      realSupply: BigNumber;
      buyFeePct: BigNumber;
      sellFeePct: BigNumber;
      formula: string;
    }
  >;

  getEVMScriptExecutor(
    _script: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenManager(overrides?: CallOverrides): Promise<string>;

  OPEN_BUY_ORDER_ROLE(overrides?: CallOverrides): Promise<string>;

  UPDATE_COLLATERAL_TOKEN_ROLE(overrides?: CallOverrides): Promise<string>;

  getRecoveryVault(overrides?: CallOverrides): Promise<string>;

  beneficiary(overrides?: CallOverrides): Promise<string>;

  openBuyOrder(
    _buyer: string,
    _collateral: string,
    _value: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  UPDATE_BENEFICIARY_ROLE(overrides?: CallOverrides): Promise<string>;

  isOpen(overrides?: CallOverrides): Promise<boolean>;

  collateralsToBeClaimed(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  formula(overrides?: CallOverrides): Promise<string>;

  claimSellOrder(
    _seller: string,
    _batchId: BigNumberish,
    _collateral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ADD_COLLATERAL_TOKEN_ROLE(overrides?: CallOverrides): Promise<string>;

  UPDATE_FEES_ROLE(overrides?: CallOverrides): Promise<string>;

  getBatch(
    _batchId: BigNumberish,
    _collateral: string,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  OPEN_ROLE(overrides?: CallOverrides): Promise<string>;

  updateFees(
    _buyFeePct: BigNumberish,
    _sellFeePct: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _controller: string,
    _tokenManager: string,
    _formula: string,
    _reserve: string,
    _beneficiary: string,
    _batchBlocks: BigNumberish,
    _buyFeePct: BigNumberish,
    _sellFeePct: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimBuyOrder(
    _buyer: string,
    _batchId: BigNumberish,
    _collateral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellFeePct(overrides?: CallOverrides): Promise<BigNumber>;

  getStaticPricePPM(
    _supply: BigNumberish,
    _balance: BigNumberish,
    _reserveRatio: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowRecoverability(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  appId(overrides?: CallOverrides): Promise<string>;

  updateCollateralToken(
    _collateral: string,
    _virtualSupply: BigNumberish,
    _virtualBalance: BigNumberish,
    _reserveRatio: BigNumberish,
    _slippage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  claimCancelledBuyOrder(
    _buyer: string,
    _batchId: BigNumberish,
    _collateral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeCollateralToken(
    _collateral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokensToBeMinted(overrides?: CallOverrides): Promise<BigNumber>;

  transferToVault(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canPerform(
    _sender: string,
    _role: BytesLike,
    _params: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

  REMOVE_COLLATERAL_TOKEN_ROLE(overrides?: CallOverrides): Promise<string>;

  batchBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  reserve(overrides?: CallOverrides): Promise<string>;

  OPEN_SELL_ORDER_ROLE(overrides?: CallOverrides): Promise<string>;

  kernel(overrides?: CallOverrides): Promise<string>;

  updateFormula(
    _formula: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimCancelledSellOrder(
    _seller: string,
    _batchId: BigNumberish,
    _collateral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isPetrified(overrides?: CallOverrides): Promise<boolean>;

  getCurrentBatchId(overrides?: CallOverrides): Promise<BigNumber>;

  collaterals(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, number, BigNumber] & {
      whitelisted: boolean;
      virtualSupply: BigNumber;
      virtualBalance: BigNumber;
      reserveRatio: number;
      slippage: BigNumber;
    }
  >;

  getCollateralToken(
    _collateral: string,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber, BigNumber, number, BigNumber]>;

  controller(overrides?: CallOverrides): Promise<string>;

  buyFeePct(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  PCT_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  open(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addCollateralToken(
    _collateral: string,
    _virtualSupply: BigNumberish,
    _virtualBalance: BigNumberish,
    _reserveRatio: BigNumberish,
    _slippage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    hasInitialized(overrides?: CallOverrides): Promise<boolean>;

    updateBeneficiary(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    PPM(overrides?: CallOverrides): Promise<number>;

    UPDATE_FORMULA_ROLE(overrides?: CallOverrides): Promise<string>;

    openSellOrder(
      _seller: string,
      _collateral: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    metaBatches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, string] & {
        initialized: boolean;
        realSupply: BigNumber;
        buyFeePct: BigNumber;
        sellFeePct: BigNumber;
        formula: string;
      }
    >;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenManager(overrides?: CallOverrides): Promise<string>;

    OPEN_BUY_ORDER_ROLE(overrides?: CallOverrides): Promise<string>;

    UPDATE_COLLATERAL_TOKEN_ROLE(overrides?: CallOverrides): Promise<string>;

    getRecoveryVault(overrides?: CallOverrides): Promise<string>;

    beneficiary(overrides?: CallOverrides): Promise<string>;

    openBuyOrder(
      _buyer: string,
      _collateral: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    UPDATE_BENEFICIARY_ROLE(overrides?: CallOverrides): Promise<string>;

    isOpen(overrides?: CallOverrides): Promise<boolean>;

    collateralsToBeClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    formula(overrides?: CallOverrides): Promise<string>;

    claimSellOrder(
      _seller: string,
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ADD_COLLATERAL_TOKEN_ROLE(overrides?: CallOverrides): Promise<string>;

    UPDATE_FEES_ROLE(overrides?: CallOverrides): Promise<string>;

    getBatch(
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    OPEN_ROLE(overrides?: CallOverrides): Promise<string>;

    updateFees(
      _buyFeePct: BigNumberish,
      _sellFeePct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _controller: string,
      _tokenManager: string,
      _formula: string,
      _reserve: string,
      _beneficiary: string,
      _batchBlocks: BigNumberish,
      _buyFeePct: BigNumberish,
      _sellFeePct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimBuyOrder(
      _buyer: string,
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sellFeePct(overrides?: CallOverrides): Promise<BigNumber>;

    getStaticPricePPM(
      _supply: BigNumberish,
      _balance: BigNumberish,
      _reserveRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    appId(overrides?: CallOverrides): Promise<string>;

    updateCollateralToken(
      _collateral: string,
      _virtualSupply: BigNumberish,
      _virtualBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    claimCancelledBuyOrder(
      _buyer: string,
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeCollateralToken(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokensToBeMinted(overrides?: CallOverrides): Promise<BigNumber>;

    transferToVault(_token: string, overrides?: CallOverrides): Promise<void>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

    REMOVE_COLLATERAL_TOKEN_ROLE(overrides?: CallOverrides): Promise<string>;

    batchBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    reserve(overrides?: CallOverrides): Promise<string>;

    OPEN_SELL_ORDER_ROLE(overrides?: CallOverrides): Promise<string>;

    kernel(overrides?: CallOverrides): Promise<string>;

    updateFormula(_formula: string, overrides?: CallOverrides): Promise<void>;

    claimCancelledSellOrder(
      _seller: string,
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isPetrified(overrides?: CallOverrides): Promise<boolean>;

    getCurrentBatchId(overrides?: CallOverrides): Promise<BigNumber>;

    collaterals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, number, BigNumber] & {
        whitelisted: boolean;
        virtualSupply: BigNumber;
        virtualBalance: BigNumber;
        reserveRatio: number;
        slippage: BigNumber;
      }
    >;

    getCollateralToken(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber, number, BigNumber]>;

    controller(overrides?: CallOverrides): Promise<string>;

    buyFeePct(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    PCT_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    open(overrides?: CallOverrides): Promise<void>;

    addCollateralToken(
      _collateral: string,
      _virtualSupply: BigNumberish,
      _virtualBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "UpdateBeneficiary(address)"(
      beneficiary?: string | null
    ): TypedEventFilter<[string], { beneficiary: string }>;

    UpdateBeneficiary(
      beneficiary?: string | null
    ): TypedEventFilter<[string], { beneficiary: string }>;

    "UpdateFormula(address)"(
      formula?: string | null
    ): TypedEventFilter<[string], { formula: string }>;

    UpdateFormula(
      formula?: string | null
    ): TypedEventFilter<[string], { formula: string }>;

    "UpdateFees(uint256,uint256)"(
      buyFeePct?: null,
      sellFeePct?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { buyFeePct: BigNumber; sellFeePct: BigNumber }
    >;

    UpdateFees(
      buyFeePct?: null,
      sellFeePct?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { buyFeePct: BigNumber; sellFeePct: BigNumber }
    >;

    "NewMetaBatch(uint256,uint256,uint256,uint256,address)"(
      id?: BigNumberish | null,
      supply?: null,
      buyFeePct?: null,
      sellFeePct?: null,
      formula?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, string],
      {
        id: BigNumber;
        supply: BigNumber;
        buyFeePct: BigNumber;
        sellFeePct: BigNumber;
        formula: string;
      }
    >;

    NewMetaBatch(
      id?: BigNumberish | null,
      supply?: null,
      buyFeePct?: null,
      sellFeePct?: null,
      formula?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, string],
      {
        id: BigNumber;
        supply: BigNumber;
        buyFeePct: BigNumber;
        sellFeePct: BigNumber;
        formula: string;
      }
    >;

    "NewBatch(uint256,address,uint256,uint256,uint32,uint256)"(
      id?: BigNumberish | null,
      collateral?: string | null,
      supply?: null,
      balance?: null,
      reserveRatio?: null,
      slippage?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, number, BigNumber],
      {
        id: BigNumber;
        collateral: string;
        supply: BigNumber;
        balance: BigNumber;
        reserveRatio: number;
        slippage: BigNumber;
      }
    >;

    NewBatch(
      id?: BigNumberish | null,
      collateral?: string | null,
      supply?: null,
      balance?: null,
      reserveRatio?: null,
      slippage?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, number, BigNumber],
      {
        id: BigNumber;
        collateral: string;
        supply: BigNumber;
        balance: BigNumber;
        reserveRatio: number;
        slippage: BigNumber;
      }
    >;

    "CancelBatch(uint256,address)"(
      id?: BigNumberish | null,
      collateral?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { id: BigNumber; collateral: string }
    >;

    CancelBatch(
      id?: BigNumberish | null,
      collateral?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { id: BigNumber; collateral: string }
    >;

    "AddCollateralToken(address,uint256,uint256,uint32,uint256)"(
      collateral?: string | null,
      virtualSupply?: null,
      virtualBalance?: null,
      reserveRatio?: null,
      slippage?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, number, BigNumber],
      {
        collateral: string;
        virtualSupply: BigNumber;
        virtualBalance: BigNumber;
        reserveRatio: number;
        slippage: BigNumber;
      }
    >;

    AddCollateralToken(
      collateral?: string | null,
      virtualSupply?: null,
      virtualBalance?: null,
      reserveRatio?: null,
      slippage?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, number, BigNumber],
      {
        collateral: string;
        virtualSupply: BigNumber;
        virtualBalance: BigNumber;
        reserveRatio: number;
        slippage: BigNumber;
      }
    >;

    "RemoveCollateralToken(address)"(
      collateral?: string | null
    ): TypedEventFilter<[string], { collateral: string }>;

    RemoveCollateralToken(
      collateral?: string | null
    ): TypedEventFilter<[string], { collateral: string }>;

    "UpdateCollateralToken(address,uint256,uint256,uint32,uint256)"(
      collateral?: string | null,
      virtualSupply?: null,
      virtualBalance?: null,
      reserveRatio?: null,
      slippage?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, number, BigNumber],
      {
        collateral: string;
        virtualSupply: BigNumber;
        virtualBalance: BigNumber;
        reserveRatio: number;
        slippage: BigNumber;
      }
    >;

    UpdateCollateralToken(
      collateral?: string | null,
      virtualSupply?: null,
      virtualBalance?: null,
      reserveRatio?: null,
      slippage?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, number, BigNumber],
      {
        collateral: string;
        virtualSupply: BigNumber;
        virtualBalance: BigNumber;
        reserveRatio: number;
        slippage: BigNumber;
      }
    >;

    "Open()"(): TypedEventFilter<[], {}>;

    Open(): TypedEventFilter<[], {}>;

    "OpenBuyOrder(address,uint256,address,uint256,uint256)"(
      buyer?: string | null,
      batchId?: BigNumberish | null,
      collateral?: string | null,
      fee?: null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, BigNumber],
      {
        buyer: string;
        batchId: BigNumber;
        collateral: string;
        fee: BigNumber;
        value: BigNumber;
      }
    >;

    OpenBuyOrder(
      buyer?: string | null,
      batchId?: BigNumberish | null,
      collateral?: string | null,
      fee?: null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, BigNumber],
      {
        buyer: string;
        batchId: BigNumber;
        collateral: string;
        fee: BigNumber;
        value: BigNumber;
      }
    >;

    "OpenSellOrder(address,uint256,address,uint256)"(
      seller?: string | null,
      batchId?: BigNumberish | null,
      collateral?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      {
        seller: string;
        batchId: BigNumber;
        collateral: string;
        amount: BigNumber;
      }
    >;

    OpenSellOrder(
      seller?: string | null,
      batchId?: BigNumberish | null,
      collateral?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      {
        seller: string;
        batchId: BigNumber;
        collateral: string;
        amount: BigNumber;
      }
    >;

    "ClaimBuyOrder(address,uint256,address,uint256)"(
      buyer?: string | null,
      batchId?: BigNumberish | null,
      collateral?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      {
        buyer: string;
        batchId: BigNumber;
        collateral: string;
        amount: BigNumber;
      }
    >;

    ClaimBuyOrder(
      buyer?: string | null,
      batchId?: BigNumberish | null,
      collateral?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      {
        buyer: string;
        batchId: BigNumber;
        collateral: string;
        amount: BigNumber;
      }
    >;

    "ClaimSellOrder(address,uint256,address,uint256,uint256)"(
      seller?: string | null,
      batchId?: BigNumberish | null,
      collateral?: string | null,
      fee?: null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, BigNumber],
      {
        seller: string;
        batchId: BigNumber;
        collateral: string;
        fee: BigNumber;
        value: BigNumber;
      }
    >;

    ClaimSellOrder(
      seller?: string | null,
      batchId?: BigNumberish | null,
      collateral?: string | null,
      fee?: null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, BigNumber],
      {
        seller: string;
        batchId: BigNumber;
        collateral: string;
        fee: BigNumber;
        value: BigNumber;
      }
    >;

    "ClaimCancelledBuyOrder(address,uint256,address,uint256)"(
      buyer?: string | null,
      batchId?: BigNumberish | null,
      collateral?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      {
        buyer: string;
        batchId: BigNumber;
        collateral: string;
        value: BigNumber;
      }
    >;

    ClaimCancelledBuyOrder(
      buyer?: string | null,
      batchId?: BigNumberish | null,
      collateral?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      {
        buyer: string;
        batchId: BigNumber;
        collateral: string;
        value: BigNumber;
      }
    >;

    "ClaimCancelledSellOrder(address,uint256,address,uint256)"(
      seller?: string | null,
      batchId?: BigNumberish | null,
      collateral?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      {
        seller: string;
        batchId: BigNumber;
        collateral: string;
        amount: BigNumber;
      }
    >;

    ClaimCancelledSellOrder(
      seller?: string | null,
      batchId?: BigNumberish | null,
      collateral?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      {
        seller: string;
        batchId: BigNumber;
        collateral: string;
        amount: BigNumber;
      }
    >;

    "UpdatePricing(uint256,address,uint256,uint256,uint256,uint256)"(
      batchId?: BigNumberish | null,
      collateral?: string | null,
      totalBuySpend?: null,
      totalBuyReturn?: null,
      totalSellSpend?: null,
      totalSellReturn?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        batchId: BigNumber;
        collateral: string;
        totalBuySpend: BigNumber;
        totalBuyReturn: BigNumber;
        totalSellSpend: BigNumber;
        totalSellReturn: BigNumber;
      }
    >;

    UpdatePricing(
      batchId?: BigNumberish | null,
      collateral?: string | null,
      totalBuySpend?: null,
      totalBuyReturn?: null,
      totalSellSpend?: null,
      totalSellReturn?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        batchId: BigNumber;
        collateral: string;
        totalBuySpend: BigNumber;
        totalBuyReturn: BigNumber;
        totalSellSpend: BigNumber;
        totalSellReturn: BigNumber;
      }
    >;

    "ScriptResult(address,bytes,bytes,bytes)"(
      executor?: string | null,
      script?: null,
      input?: null,
      returnData?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { executor: string; script: string; input: string; returnData: string }
    >;

    ScriptResult(
      executor?: string | null,
      script?: null,
      input?: null,
      returnData?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { executor: string; script: string; input: string; returnData: string }
    >;

    "RecoverToVault(address,address,uint256)"(
      vault?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { vault: string; token: string; amount: BigNumber }
    >;

    RecoverToVault(
      vault?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { vault: string; token: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    hasInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    updateBeneficiary(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    PPM(overrides?: CallOverrides): Promise<BigNumber>;

    UPDATE_FORMULA_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    openSellOrder(
      _seller: string,
      _collateral: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    metaBatches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenManager(overrides?: CallOverrides): Promise<BigNumber>;

    OPEN_BUY_ORDER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UPDATE_COLLATERAL_TOKEN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    getRecoveryVault(overrides?: CallOverrides): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    openBuyOrder(
      _buyer: string,
      _collateral: string,
      _value: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    UPDATE_BENEFICIARY_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    isOpen(overrides?: CallOverrides): Promise<BigNumber>;

    collateralsToBeClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    formula(overrides?: CallOverrides): Promise<BigNumber>;

    claimSellOrder(
      _seller: string,
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ADD_COLLATERAL_TOKEN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UPDATE_FEES_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    getBatch(
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    OPEN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    updateFees(
      _buyFeePct: BigNumberish,
      _sellFeePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _controller: string,
      _tokenManager: string,
      _formula: string,
      _reserve: string,
      _beneficiary: string,
      _batchBlocks: BigNumberish,
      _buyFeePct: BigNumberish,
      _sellFeePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimBuyOrder(
      _buyer: string,
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellFeePct(overrides?: CallOverrides): Promise<BigNumber>;

    getStaticPricePPM(
      _supply: BigNumberish,
      _balance: BigNumberish,
      _reserveRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    updateCollateralToken(
      _collateral: string,
      _virtualSupply: BigNumberish,
      _virtualBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    claimCancelledBuyOrder(
      _buyer: string,
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeCollateralToken(
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokensToBeMinted(overrides?: CallOverrides): Promise<BigNumber>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    REMOVE_COLLATERAL_TOKEN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    batchBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    reserve(overrides?: CallOverrides): Promise<BigNumber>;

    OPEN_SELL_ORDER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    updateFormula(
      _formula: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimCancelledSellOrder(
      _seller: string,
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentBatchId(overrides?: CallOverrides): Promise<BigNumber>;

    collaterals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralToken(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    buyFeePct(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    PCT_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    open(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addCollateralToken(
      _collateral: string,
      _virtualSupply: BigNumberish,
      _virtualBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    hasInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateBeneficiary(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    PPM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UPDATE_FORMULA_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openSellOrder(
      _seller: string,
      _collateral: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    metaBatches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OPEN_BUY_ORDER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPDATE_COLLATERAL_TOKEN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecoveryVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openBuyOrder(
      _buyer: string,
      _collateral: string,
      _value: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    UPDATE_BENEFICIARY_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralsToBeClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    formula(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimSellOrder(
      _seller: string,
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ADD_COLLATERAL_TOKEN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPDATE_FEES_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBatch(
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OPEN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateFees(
      _buyFeePct: BigNumberish,
      _sellFeePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _controller: string,
      _tokenManager: string,
      _formula: string,
      _reserve: string,
      _beneficiary: string,
      _batchBlocks: BigNumberish,
      _buyFeePct: BigNumberish,
      _sellFeePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimBuyOrder(
      _buyer: string,
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellFeePct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStaticPricePPM(
      _supply: BigNumberish,
      _balance: BigNumberish,
      _reserveRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateCollateralToken(
      _collateral: string,
      _virtualSupply: BigNumberish,
      _virtualBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getInitializationBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimCancelledBuyOrder(
      _buyer: string,
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeCollateralToken(
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokensToBeMinted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REMOVE_COLLATERAL_TOKEN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchBlocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OPEN_SELL_ORDER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateFormula(
      _formula: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimCancelledSellOrder(
      _seller: string,
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isPetrified(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentBatchId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collaterals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralToken(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyFeePct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PCT_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    open(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addCollateralToken(
      _collateral: string,
      _virtualSupply: BigNumberish,
      _virtualBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
