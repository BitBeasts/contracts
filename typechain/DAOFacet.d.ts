/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DAOFacetInterface extends ethers.utils.Interface {
  functions: {
    "addCollateralTypes(uint256,tuple[])": FunctionFragment;
    "addGameManagers(address[],uint256[])": FunctionFragment;
    "addItemManagers(address[])": FunctionFragment;
    "addItemTypes(tuple[])": FunctionFragment;
    "addItemTypesAndSvgs(tuple[],string,tuple[])": FunctionFragment;
    "addWearableSets(tuple[])": FunctionFragment;
    "batchUpdateItemsPrice(uint256[],uint256[])": FunctionFragment;
    "createHaunt(uint24,uint96,bytes3)": FunctionFragment;
    "createHauntWithPayload(tuple)": FunctionFragment;
    "gameManagerBalance(address)": FunctionFragment;
    "gameManagerRefreshTime(address)": FunctionFragment;
    "grantExperience(uint256[],uint256[])": FunctionFragment;
    "isGameManager(address)": FunctionFragment;
    "mintItems(address,uint256[],uint256[])": FunctionFragment;
    "removeExperience(uint256[],uint256[])": FunctionFragment;
    "removeGameManagers(address[])": FunctionFragment;
    "removeItemManagers(address[])": FunctionFragment;
    "setDao(address,address)": FunctionFragment;
    "setForge(address)": FunctionFragment;
    "setItemTraitModifiersAndRarityModifier(uint256,int8[6],uint8)": FunctionFragment;
    "setWearableSlotPositions(uint256,bool[16])": FunctionFragment;
    "updateCollateralModifiers(address,int16[6])": FunctionFragment;
    "updateItemTypeMaxQuantity(uint256[],uint256[])": FunctionFragment;
    "updateItemTypes(uint256[],tuple[])": FunctionFragment;
    "updateWearableSets(uint256[],tuple[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addCollateralTypes",
    values: [
      BigNumberish,
      {
        collateralType: string;
        collateralTypeInfo: {
          modifiers: [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ];
          primaryColor: BytesLike;
          secondaryColor: BytesLike;
          cheekColor: BytesLike;
          svgId: BigNumberish;
          eyeShapeSvgId: BigNumberish;
          conversionRate: BigNumberish;
          delisted: boolean;
        };
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addGameManagers",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addItemManagers",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addItemTypes",
    values: [
      {
        name: string;
        description: string;
        author: string;
        traitModifiers: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        slotPositions: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ];
        allowedCollaterals: BigNumberish[];
        dimensions: {
          x: BigNumberish;
          y: BigNumberish;
          width: BigNumberish;
          height: BigNumberish;
        };
        ghstPrice: BigNumberish;
        maxQuantity: BigNumberish;
        totalQuantity: BigNumberish;
        svgId: BigNumberish;
        rarityScoreModifier: BigNumberish;
        canPurchaseWithGhst: boolean;
        minLevel: BigNumberish;
        canBeTransferred: boolean;
        category: BigNumberish;
        kinshipBonus: BigNumberish;
        experienceBonus: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addItemTypesAndSvgs",
    values: [
      {
        name: string;
        description: string;
        author: string;
        traitModifiers: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        slotPositions: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ];
        allowedCollaterals: BigNumberish[];
        dimensions: {
          x: BigNumberish;
          y: BigNumberish;
          width: BigNumberish;
          height: BigNumberish;
        };
        ghstPrice: BigNumberish;
        maxQuantity: BigNumberish;
        totalQuantity: BigNumberish;
        svgId: BigNumberish;
        rarityScoreModifier: BigNumberish;
        canPurchaseWithGhst: boolean;
        minLevel: BigNumberish;
        canBeTransferred: boolean;
        category: BigNumberish;
        kinshipBonus: BigNumberish;
        experienceBonus: BigNumberish;
      }[],
      string,
      { svgType: BytesLike; sizes: BigNumberish[] }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addWearableSets",
    values: [
      {
        name: string;
        allowedCollaterals: BigNumberish[];
        wearableIds: BigNumberish[];
        traitsBonuses: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchUpdateItemsPrice",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createHaunt",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createHauntWithPayload",
    values: [
      {
        _hauntMaxSize: BigNumberish;
        _portalPrice: BigNumberish;
        _bodyColor: BytesLike;
        _collateralTypes: {
          collateralType: string;
          collateralTypeInfo: {
            modifiers: [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ];
            primaryColor: BytesLike;
            secondaryColor: BytesLike;
            cheekColor: BytesLike;
            svgId: BigNumberish;
            eyeShapeSvgId: BigNumberish;
            conversionRate: BigNumberish;
            delisted: boolean;
          };
        }[];
        _collateralSvg: string;
        _collateralTypesAndSizes: {
          svgType: BytesLike;
          sizes: BigNumberish[];
        }[];
        _eyeShapeSvg: string;
        _eyeShapeTypesAndSizes: { svgType: BytesLike; sizes: BigNumberish[] }[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "gameManagerBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "gameManagerRefreshTime",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantExperience",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isGameManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintItems",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeExperience",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeGameManagers",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeItemManagers",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDao",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "setForge", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setItemTraitModifiersAndRarityModifier",
    values: [
      BigNumberish,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setWearableSlotPositions",
    values: [
      BigNumberish,
      [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCollateralModifiers",
    values: [
      string,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateItemTypeMaxQuantity",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateItemTypes",
    values: [
      BigNumberish[],
      {
        name: string;
        description: string;
        author: string;
        traitModifiers: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        slotPositions: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ];
        allowedCollaterals: BigNumberish[];
        dimensions: {
          x: BigNumberish;
          y: BigNumberish;
          width: BigNumberish;
          height: BigNumberish;
        };
        ghstPrice: BigNumberish;
        maxQuantity: BigNumberish;
        totalQuantity: BigNumberish;
        svgId: BigNumberish;
        rarityScoreModifier: BigNumberish;
        canPurchaseWithGhst: boolean;
        minLevel: BigNumberish;
        canBeTransferred: boolean;
        category: BigNumberish;
        kinshipBonus: BigNumberish;
        experienceBonus: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWearableSets",
    values: [
      BigNumberish[],
      {
        name: string;
        allowedCollaterals: BigNumberish[];
        wearableIds: BigNumberish[];
        traitsBonuses: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCollateralTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addGameManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addItemManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addItemTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addItemTypesAndSvgs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWearableSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchUpdateItemsPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createHaunt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createHauntWithPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameManagerBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameManagerRefreshTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantExperience",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGameManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintItems", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeExperience",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGameManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeItemManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDao", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setForge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setItemTraitModifiersAndRarityModifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWearableSlotPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCollateralModifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateItemTypeMaxQuantity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateItemTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWearableSets",
    data: BytesLike
  ): Result;

  events: {
    "AddCollateralType(tuple)": EventFragment;
    "AddItemType(tuple)": EventFragment;
    "AddWearableSet(tuple)": EventFragment;
    "CreateHaunt(uint256,uint256,uint256,bytes32)": EventFragment;
    "DaoTransferred(address,address)": EventFragment;
    "DaoTreasuryTransferred(address,address)": EventFragment;
    "ForgeTransferred(address,address)": EventFragment;
    "GameManagerAdded(address,uint256,uint256)": EventFragment;
    "GameManagerRemoved(address)": EventFragment;
    "GrantExperience(uint256[],uint256[])": EventFragment;
    "ItemManagerAdded(address)": EventFragment;
    "ItemManagerRemoved(address)": EventFragment;
    "ItemModifiersSet(uint256,int8[6],uint8)": EventFragment;
    "ItemTypeMaxQuantity(uint256[],uint256[])": EventFragment;
    "RemoveExperience(uint256[],uint256[])": EventFragment;
    "UpdateCollateralModifiers(int16[6],int16[6])": EventFragment;
    "UpdateItemPrice(uint256,uint256)": EventFragment;
    "UpdateItemType(uint256,tuple)": EventFragment;
    "UpdateWearableSet(uint256,tuple)": EventFragment;
    "WearableSlotPositionsSet(uint256,bool[16])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddCollateralType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddItemType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddWearableSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateHaunt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DaoTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DaoTreasuryTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForgeTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameManagerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameManagerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrantExperience"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemManagerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemManagerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemModifiersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemTypeMaxQuantity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveExperience"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateCollateralModifiers"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateItemPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateItemType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateWearableSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WearableSlotPositionsSet"): EventFragment;
}

export type AddCollateralTypeEvent = TypedEvent<
  [
    [
      string,
      [
        [number, number, number, number, number, number],
        string,
        string,
        string,
        number,
        number,
        number,
        boolean
      ] & {
        modifiers: [number, number, number, number, number, number];
        primaryColor: string;
        secondaryColor: string;
        cheekColor: string;
        svgId: number;
        eyeShapeSvgId: number;
        conversionRate: number;
        delisted: boolean;
      }
    ] & {
      collateralType: string;
      collateralTypeInfo: [
        [number, number, number, number, number, number],
        string,
        string,
        string,
        number,
        number,
        number,
        boolean
      ] & {
        modifiers: [number, number, number, number, number, number];
        primaryColor: string;
        secondaryColor: string;
        cheekColor: string;
        svgId: number;
        eyeShapeSvgId: number;
        conversionRate: number;
        delisted: boolean;
      };
    }
  ] & {
    _collateralType: [
      string,
      [
        [number, number, number, number, number, number],
        string,
        string,
        string,
        number,
        number,
        number,
        boolean
      ] & {
        modifiers: [number, number, number, number, number, number];
        primaryColor: string;
        secondaryColor: string;
        cheekColor: string;
        svgId: number;
        eyeShapeSvgId: number;
        conversionRate: number;
        delisted: boolean;
      }
    ] & {
      collateralType: string;
      collateralTypeInfo: [
        [number, number, number, number, number, number],
        string,
        string,
        string,
        number,
        number,
        number,
        boolean
      ] & {
        modifiers: [number, number, number, number, number, number];
        primaryColor: string;
        secondaryColor: string;
        cheekColor: string;
        svgId: number;
        eyeShapeSvgId: number;
        conversionRate: number;
        delisted: boolean;
      };
    };
  }
>;

export type AddItemTypeEvent = TypedEvent<
  [
    [
      string,
      string,
      string,
      [number, number, number, number, number, number],
      [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ],
      number[],
      [number, number, number, number] & {
        x: number;
        y: number;
        width: number;
        height: number;
      },
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number,
      boolean,
      number,
      boolean,
      number,
      number,
      number
    ] & {
      name: string;
      description: string;
      author: string;
      traitModifiers: [number, number, number, number, number, number];
      slotPositions: [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ];
      allowedCollaterals: number[];
      dimensions: [number, number, number, number] & {
        x: number;
        y: number;
        width: number;
        height: number;
      };
      ghstPrice: BigNumber;
      maxQuantity: BigNumber;
      totalQuantity: BigNumber;
      svgId: number;
      rarityScoreModifier: number;
      canPurchaseWithGhst: boolean;
      minLevel: number;
      canBeTransferred: boolean;
      category: number;
      kinshipBonus: number;
      experienceBonus: number;
    }
  ] & {
    _itemType: [
      string,
      string,
      string,
      [number, number, number, number, number, number],
      [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ],
      number[],
      [number, number, number, number] & {
        x: number;
        y: number;
        width: number;
        height: number;
      },
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number,
      boolean,
      number,
      boolean,
      number,
      number,
      number
    ] & {
      name: string;
      description: string;
      author: string;
      traitModifiers: [number, number, number, number, number, number];
      slotPositions: [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ];
      allowedCollaterals: number[];
      dimensions: [number, number, number, number] & {
        x: number;
        y: number;
        width: number;
        height: number;
      };
      ghstPrice: BigNumber;
      maxQuantity: BigNumber;
      totalQuantity: BigNumber;
      svgId: number;
      rarityScoreModifier: number;
      canPurchaseWithGhst: boolean;
      minLevel: number;
      canBeTransferred: boolean;
      category: number;
      kinshipBonus: number;
      experienceBonus: number;
    };
  }
>;

export type AddWearableSetEvent = TypedEvent<
  [
    [string, number[], number[], [number, number, number, number, number]] & {
      name: string;
      allowedCollaterals: number[];
      wearableIds: number[];
      traitsBonuses: [number, number, number, number, number];
    }
  ] & {
    _wearableSet: [
      string,
      number[],
      number[],
      [number, number, number, number, number]
    ] & {
      name: string;
      allowedCollaterals: number[];
      wearableIds: number[];
      traitsBonuses: [number, number, number, number, number];
    };
  }
>;

export type CreateHauntEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string] & {
    _hauntId: BigNumber;
    _hauntMaxSize: BigNumber;
    _portalPrice: BigNumber;
    _bodyColor: string;
  }
>;

export type DaoTransferredEvent = TypedEvent<
  [string, string] & { previousDao: string; newDao: string }
>;

export type DaoTreasuryTransferredEvent = TypedEvent<
  [string, string] & { previousDaoTreasury: string; newDaoTreasury: string }
>;

export type ForgeTransferredEvent = TypedEvent<
  [string, string] & { previousForge: string; newForge: string }
>;

export type GameManagerAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    gameManager_: string;
    limit_: BigNumber;
    refreshTime_: BigNumber;
  }
>;

export type GameManagerRemovedEvent = TypedEvent<
  [string] & { gameManager_: string }
>;

export type GrantExperienceEvent = TypedEvent<
  [BigNumber[], BigNumber[]] & {
    _tokenIds: BigNumber[];
    _xpValues: BigNumber[];
  }
>;

export type ItemManagerAddedEvent = TypedEvent<
  [string] & { newItemManager_: string }
>;

export type ItemManagerRemovedEvent = TypedEvent<
  [string] & { itemManager_: string }
>;

export type ItemModifiersSetEvent = TypedEvent<
  [BigNumber, [number, number, number, number, number, number], number] & {
    _wearableId: BigNumber;
    _traitModifiers: [number, number, number, number, number, number];
    _rarityScoreModifier: number;
  }
>;

export type ItemTypeMaxQuantityEvent = TypedEvent<
  [BigNumber[], BigNumber[]] & {
    _itemIds: BigNumber[];
    _maxQuanities: BigNumber[];
  }
>;

export type RemoveExperienceEvent = TypedEvent<
  [BigNumber[], BigNumber[]] & {
    _tokenIds: BigNumber[];
    _xpValues: BigNumber[];
  }
>;

export type UpdateCollateralModifiersEvent = TypedEvent<
  [
    [number, number, number, number, number, number],
    [number, number, number, number, number, number]
  ] & {
    _oldModifiers: [number, number, number, number, number, number];
    _newModifiers: [number, number, number, number, number, number];
  }
>;

export type UpdateItemPriceEvent = TypedEvent<
  [BigNumber, BigNumber] & { _itemId: BigNumber; _priceInWei: BigNumber }
>;

export type UpdateItemTypeEvent = TypedEvent<
  [
    BigNumber,
    [
      string,
      string,
      string,
      [number, number, number, number, number, number],
      [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ],
      number[],
      [number, number, number, number] & {
        x: number;
        y: number;
        width: number;
        height: number;
      },
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number,
      boolean,
      number,
      boolean,
      number,
      number,
      number
    ] & {
      name: string;
      description: string;
      author: string;
      traitModifiers: [number, number, number, number, number, number];
      slotPositions: [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ];
      allowedCollaterals: number[];
      dimensions: [number, number, number, number] & {
        x: number;
        y: number;
        width: number;
        height: number;
      };
      ghstPrice: BigNumber;
      maxQuantity: BigNumber;
      totalQuantity: BigNumber;
      svgId: number;
      rarityScoreModifier: number;
      canPurchaseWithGhst: boolean;
      minLevel: number;
      canBeTransferred: boolean;
      category: number;
      kinshipBonus: number;
      experienceBonus: number;
    }
  ] & {
    _itemId: BigNumber;
    _itemType: [
      string,
      string,
      string,
      [number, number, number, number, number, number],
      [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ],
      number[],
      [number, number, number, number] & {
        x: number;
        y: number;
        width: number;
        height: number;
      },
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number,
      boolean,
      number,
      boolean,
      number,
      number,
      number
    ] & {
      name: string;
      description: string;
      author: string;
      traitModifiers: [number, number, number, number, number, number];
      slotPositions: [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ];
      allowedCollaterals: number[];
      dimensions: [number, number, number, number] & {
        x: number;
        y: number;
        width: number;
        height: number;
      };
      ghstPrice: BigNumber;
      maxQuantity: BigNumber;
      totalQuantity: BigNumber;
      svgId: number;
      rarityScoreModifier: number;
      canPurchaseWithGhst: boolean;
      minLevel: number;
      canBeTransferred: boolean;
      category: number;
      kinshipBonus: number;
      experienceBonus: number;
    };
  }
>;

export type UpdateWearableSetEvent = TypedEvent<
  [
    BigNumber,
    [string, number[], number[], [number, number, number, number, number]] & {
      name: string;
      allowedCollaterals: number[];
      wearableIds: number[];
      traitsBonuses: [number, number, number, number, number];
    }
  ] & {
    _setId: BigNumber;
    _wearableSet: [
      string,
      number[],
      number[],
      [number, number, number, number, number]
    ] & {
      name: string;
      allowedCollaterals: number[];
      wearableIds: number[];
      traitsBonuses: [number, number, number, number, number];
    };
  }
>;

export type WearableSlotPositionsSetEvent = TypedEvent<
  [
    BigNumber,
    [
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean
    ]
  ] & {
    _wearableId: BigNumber;
    _slotPositions: [
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean
    ];
  }
>;

export class DAOFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DAOFacetInterface;

  functions: {
    addCollateralTypes(
      _hauntId: BigNumberish,
      _collateralTypes: {
        collateralType: string;
        collateralTypeInfo: {
          modifiers: [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ];
          primaryColor: BytesLike;
          secondaryColor: BytesLike;
          cheekColor: BytesLike;
          svgId: BigNumberish;
          eyeShapeSvgId: BigNumberish;
          conversionRate: BigNumberish;
          delisted: boolean;
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addGameManagers(
      _newGameManagers: string[],
      _limits: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addItemManagers(
      _newItemManagers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addItemTypes(
      _itemTypes: {
        name: string;
        description: string;
        author: string;
        traitModifiers: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        slotPositions: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ];
        allowedCollaterals: BigNumberish[];
        dimensions: {
          x: BigNumberish;
          y: BigNumberish;
          width: BigNumberish;
          height: BigNumberish;
        };
        ghstPrice: BigNumberish;
        maxQuantity: BigNumberish;
        totalQuantity: BigNumberish;
        svgId: BigNumberish;
        rarityScoreModifier: BigNumberish;
        canPurchaseWithGhst: boolean;
        minLevel: BigNumberish;
        canBeTransferred: boolean;
        category: BigNumberish;
        kinshipBonus: BigNumberish;
        experienceBonus: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addItemTypesAndSvgs(
      _itemTypes: {
        name: string;
        description: string;
        author: string;
        traitModifiers: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        slotPositions: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ];
        allowedCollaterals: BigNumberish[];
        dimensions: {
          x: BigNumberish;
          y: BigNumberish;
          width: BigNumberish;
          height: BigNumberish;
        };
        ghstPrice: BigNumberish;
        maxQuantity: BigNumberish;
        totalQuantity: BigNumberish;
        svgId: BigNumberish;
        rarityScoreModifier: BigNumberish;
        canPurchaseWithGhst: boolean;
        minLevel: BigNumberish;
        canBeTransferred: boolean;
        category: BigNumberish;
        kinshipBonus: BigNumberish;
        experienceBonus: BigNumberish;
      }[],
      _svg: string,
      _typesAndSizes: { svgType: BytesLike; sizes: BigNumberish[] }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addWearableSets(
      _wearableSets: {
        name: string;
        allowedCollaterals: BigNumberish[];
        wearableIds: BigNumberish[];
        traitsBonuses: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchUpdateItemsPrice(
      _itemIds: BigNumberish[],
      _newPrices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createHaunt(
      _hauntMaxSize: BigNumberish,
      _portalPrice: BigNumberish,
      _bodyColor: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createHauntWithPayload(
      _payload: {
        _hauntMaxSize: BigNumberish;
        _portalPrice: BigNumberish;
        _bodyColor: BytesLike;
        _collateralTypes: {
          collateralType: string;
          collateralTypeInfo: {
            modifiers: [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ];
            primaryColor: BytesLike;
            secondaryColor: BytesLike;
            cheekColor: BytesLike;
            svgId: BigNumberish;
            eyeShapeSvgId: BigNumberish;
            conversionRate: BigNumberish;
            delisted: boolean;
          };
        }[];
        _collateralSvg: string;
        _collateralTypesAndSizes: {
          svgType: BytesLike;
          sizes: BigNumberish[];
        }[];
        _eyeShapeSvg: string;
        _eyeShapeTypesAndSizes: { svgType: BytesLike; sizes: BigNumberish[] }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gameManagerBalance(
      _manager: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gameManagerRefreshTime(
      _manager: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantExperience(
      _tokenIds: BigNumberish[],
      _xpValues: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isGameManager(
      _manager: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintItems(
      _to: string,
      _itemIds: BigNumberish[],
      _quantities: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeExperience(
      _tokenIds: BigNumberish[],
      _xpValues: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeGameManagers(
      _gameManagers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeItemManagers(
      _itemManagers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDao(
      _newDao: string,
      _newDaoTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setForge(
      _newForge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setItemTraitModifiersAndRarityModifier(
      _wearableId: BigNumberish,
      _traitModifiers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _rarityScoreModifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWearableSlotPositions(
      _wearableId: BigNumberish,
      _slotPositions: [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCollateralModifiers(
      _collateralType: string,
      _modifiers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateItemTypeMaxQuantity(
      _itemIds: BigNumberish[],
      _maxQuantities: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateItemTypes(
      _indices: BigNumberish[],
      _itemTypes: {
        name: string;
        description: string;
        author: string;
        traitModifiers: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        slotPositions: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ];
        allowedCollaterals: BigNumberish[];
        dimensions: {
          x: BigNumberish;
          y: BigNumberish;
          width: BigNumberish;
          height: BigNumberish;
        };
        ghstPrice: BigNumberish;
        maxQuantity: BigNumberish;
        totalQuantity: BigNumberish;
        svgId: BigNumberish;
        rarityScoreModifier: BigNumberish;
        canPurchaseWithGhst: boolean;
        minLevel: BigNumberish;
        canBeTransferred: boolean;
        category: BigNumberish;
        kinshipBonus: BigNumberish;
        experienceBonus: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateWearableSets(
      _setIds: BigNumberish[],
      _wearableSets: {
        name: string;
        allowedCollaterals: BigNumberish[];
        wearableIds: BigNumberish[];
        traitsBonuses: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addCollateralTypes(
    _hauntId: BigNumberish,
    _collateralTypes: {
      collateralType: string;
      collateralTypeInfo: {
        modifiers: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        primaryColor: BytesLike;
        secondaryColor: BytesLike;
        cheekColor: BytesLike;
        svgId: BigNumberish;
        eyeShapeSvgId: BigNumberish;
        conversionRate: BigNumberish;
        delisted: boolean;
      };
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addGameManagers(
    _newGameManagers: string[],
    _limits: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addItemManagers(
    _newItemManagers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addItemTypes(
    _itemTypes: {
      name: string;
      description: string;
      author: string;
      traitModifiers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
      slotPositions: [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ];
      allowedCollaterals: BigNumberish[];
      dimensions: {
        x: BigNumberish;
        y: BigNumberish;
        width: BigNumberish;
        height: BigNumberish;
      };
      ghstPrice: BigNumberish;
      maxQuantity: BigNumberish;
      totalQuantity: BigNumberish;
      svgId: BigNumberish;
      rarityScoreModifier: BigNumberish;
      canPurchaseWithGhst: boolean;
      minLevel: BigNumberish;
      canBeTransferred: boolean;
      category: BigNumberish;
      kinshipBonus: BigNumberish;
      experienceBonus: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addItemTypesAndSvgs(
    _itemTypes: {
      name: string;
      description: string;
      author: string;
      traitModifiers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
      slotPositions: [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ];
      allowedCollaterals: BigNumberish[];
      dimensions: {
        x: BigNumberish;
        y: BigNumberish;
        width: BigNumberish;
        height: BigNumberish;
      };
      ghstPrice: BigNumberish;
      maxQuantity: BigNumberish;
      totalQuantity: BigNumberish;
      svgId: BigNumberish;
      rarityScoreModifier: BigNumberish;
      canPurchaseWithGhst: boolean;
      minLevel: BigNumberish;
      canBeTransferred: boolean;
      category: BigNumberish;
      kinshipBonus: BigNumberish;
      experienceBonus: BigNumberish;
    }[],
    _svg: string,
    _typesAndSizes: { svgType: BytesLike; sizes: BigNumberish[] }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addWearableSets(
    _wearableSets: {
      name: string;
      allowedCollaterals: BigNumberish[];
      wearableIds: BigNumberish[];
      traitsBonuses: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchUpdateItemsPrice(
    _itemIds: BigNumberish[],
    _newPrices: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createHaunt(
    _hauntMaxSize: BigNumberish,
    _portalPrice: BigNumberish,
    _bodyColor: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createHauntWithPayload(
    _payload: {
      _hauntMaxSize: BigNumberish;
      _portalPrice: BigNumberish;
      _bodyColor: BytesLike;
      _collateralTypes: {
        collateralType: string;
        collateralTypeInfo: {
          modifiers: [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ];
          primaryColor: BytesLike;
          secondaryColor: BytesLike;
          cheekColor: BytesLike;
          svgId: BigNumberish;
          eyeShapeSvgId: BigNumberish;
          conversionRate: BigNumberish;
          delisted: boolean;
        };
      }[];
      _collateralSvg: string;
      _collateralTypesAndSizes: { svgType: BytesLike; sizes: BigNumberish[] }[];
      _eyeShapeSvg: string;
      _eyeShapeTypesAndSizes: { svgType: BytesLike; sizes: BigNumberish[] }[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gameManagerBalance(
    _manager: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gameManagerRefreshTime(
    _manager: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantExperience(
    _tokenIds: BigNumberish[],
    _xpValues: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isGameManager(_manager: string, overrides?: CallOverrides): Promise<boolean>;

  mintItems(
    _to: string,
    _itemIds: BigNumberish[],
    _quantities: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeExperience(
    _tokenIds: BigNumberish[],
    _xpValues: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeGameManagers(
    _gameManagers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeItemManagers(
    _itemManagers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDao(
    _newDao: string,
    _newDaoTreasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setForge(
    _newForge: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setItemTraitModifiersAndRarityModifier(
    _wearableId: BigNumberish,
    _traitModifiers: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    _rarityScoreModifier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWearableSlotPositions(
    _wearableId: BigNumberish,
    _slotPositions: [
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCollateralModifiers(
    _collateralType: string,
    _modifiers: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateItemTypeMaxQuantity(
    _itemIds: BigNumberish[],
    _maxQuantities: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateItemTypes(
    _indices: BigNumberish[],
    _itemTypes: {
      name: string;
      description: string;
      author: string;
      traitModifiers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
      slotPositions: [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ];
      allowedCollaterals: BigNumberish[];
      dimensions: {
        x: BigNumberish;
        y: BigNumberish;
        width: BigNumberish;
        height: BigNumberish;
      };
      ghstPrice: BigNumberish;
      maxQuantity: BigNumberish;
      totalQuantity: BigNumberish;
      svgId: BigNumberish;
      rarityScoreModifier: BigNumberish;
      canPurchaseWithGhst: boolean;
      minLevel: BigNumberish;
      canBeTransferred: boolean;
      category: BigNumberish;
      kinshipBonus: BigNumberish;
      experienceBonus: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateWearableSets(
    _setIds: BigNumberish[],
    _wearableSets: {
      name: string;
      allowedCollaterals: BigNumberish[];
      wearableIds: BigNumberish[];
      traitsBonuses: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCollateralTypes(
      _hauntId: BigNumberish,
      _collateralTypes: {
        collateralType: string;
        collateralTypeInfo: {
          modifiers: [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ];
          primaryColor: BytesLike;
          secondaryColor: BytesLike;
          cheekColor: BytesLike;
          svgId: BigNumberish;
          eyeShapeSvgId: BigNumberish;
          conversionRate: BigNumberish;
          delisted: boolean;
        };
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    addGameManagers(
      _newGameManagers: string[],
      _limits: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    addItemManagers(
      _newItemManagers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    addItemTypes(
      _itemTypes: {
        name: string;
        description: string;
        author: string;
        traitModifiers: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        slotPositions: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ];
        allowedCollaterals: BigNumberish[];
        dimensions: {
          x: BigNumberish;
          y: BigNumberish;
          width: BigNumberish;
          height: BigNumberish;
        };
        ghstPrice: BigNumberish;
        maxQuantity: BigNumberish;
        totalQuantity: BigNumberish;
        svgId: BigNumberish;
        rarityScoreModifier: BigNumberish;
        canPurchaseWithGhst: boolean;
        minLevel: BigNumberish;
        canBeTransferred: boolean;
        category: BigNumberish;
        kinshipBonus: BigNumberish;
        experienceBonus: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    addItemTypesAndSvgs(
      _itemTypes: {
        name: string;
        description: string;
        author: string;
        traitModifiers: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        slotPositions: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ];
        allowedCollaterals: BigNumberish[];
        dimensions: {
          x: BigNumberish;
          y: BigNumberish;
          width: BigNumberish;
          height: BigNumberish;
        };
        ghstPrice: BigNumberish;
        maxQuantity: BigNumberish;
        totalQuantity: BigNumberish;
        svgId: BigNumberish;
        rarityScoreModifier: BigNumberish;
        canPurchaseWithGhst: boolean;
        minLevel: BigNumberish;
        canBeTransferred: boolean;
        category: BigNumberish;
        kinshipBonus: BigNumberish;
        experienceBonus: BigNumberish;
      }[],
      _svg: string,
      _typesAndSizes: { svgType: BytesLike; sizes: BigNumberish[] }[],
      overrides?: CallOverrides
    ): Promise<void>;

    addWearableSets(
      _wearableSets: {
        name: string;
        allowedCollaterals: BigNumberish[];
        wearableIds: BigNumberish[];
        traitsBonuses: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchUpdateItemsPrice(
      _itemIds: BigNumberish[],
      _newPrices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    createHaunt(
      _hauntMaxSize: BigNumberish,
      _portalPrice: BigNumberish,
      _bodyColor: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createHauntWithPayload(
      _payload: {
        _hauntMaxSize: BigNumberish;
        _portalPrice: BigNumberish;
        _bodyColor: BytesLike;
        _collateralTypes: {
          collateralType: string;
          collateralTypeInfo: {
            modifiers: [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ];
            primaryColor: BytesLike;
            secondaryColor: BytesLike;
            cheekColor: BytesLike;
            svgId: BigNumberish;
            eyeShapeSvgId: BigNumberish;
            conversionRate: BigNumberish;
            delisted: boolean;
          };
        }[];
        _collateralSvg: string;
        _collateralTypesAndSizes: {
          svgType: BytesLike;
          sizes: BigNumberish[];
        }[];
        _eyeShapeSvg: string;
        _eyeShapeTypesAndSizes: { svgType: BytesLike; sizes: BigNumberish[] }[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gameManagerBalance(
      _manager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gameManagerRefreshTime(
      _manager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantExperience(
      _tokenIds: BigNumberish[],
      _xpValues: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    isGameManager(
      _manager: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintItems(
      _to: string,
      _itemIds: BigNumberish[],
      _quantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeExperience(
      _tokenIds: BigNumberish[],
      _xpValues: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeGameManagers(
      _gameManagers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeItemManagers(
      _itemManagers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setDao(
      _newDao: string,
      _newDaoTreasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setForge(_newForge: string, overrides?: CallOverrides): Promise<void>;

    setItemTraitModifiersAndRarityModifier(
      _wearableId: BigNumberish,
      _traitModifiers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _rarityScoreModifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWearableSlotPositions(
      _wearableId: BigNumberish,
      _slotPositions: [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    updateCollateralModifiers(
      _collateralType: string,
      _modifiers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    updateItemTypeMaxQuantity(
      _itemIds: BigNumberish[],
      _maxQuantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateItemTypes(
      _indices: BigNumberish[],
      _itemTypes: {
        name: string;
        description: string;
        author: string;
        traitModifiers: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        slotPositions: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ];
        allowedCollaterals: BigNumberish[];
        dimensions: {
          x: BigNumberish;
          y: BigNumberish;
          width: BigNumberish;
          height: BigNumberish;
        };
        ghstPrice: BigNumberish;
        maxQuantity: BigNumberish;
        totalQuantity: BigNumberish;
        svgId: BigNumberish;
        rarityScoreModifier: BigNumberish;
        canPurchaseWithGhst: boolean;
        minLevel: BigNumberish;
        canBeTransferred: boolean;
        category: BigNumberish;
        kinshipBonus: BigNumberish;
        experienceBonus: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateWearableSets(
      _setIds: BigNumberish[],
      _wearableSets: {
        name: string;
        allowedCollaterals: BigNumberish[];
        wearableIds: BigNumberish[];
        traitsBonuses: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddCollateralType(tuple)"(
      _collateralType?: null
    ): TypedEventFilter<
      [
        [
          string,
          [
            [number, number, number, number, number, number],
            string,
            string,
            string,
            number,
            number,
            number,
            boolean
          ] & {
            modifiers: [number, number, number, number, number, number];
            primaryColor: string;
            secondaryColor: string;
            cheekColor: string;
            svgId: number;
            eyeShapeSvgId: number;
            conversionRate: number;
            delisted: boolean;
          }
        ] & {
          collateralType: string;
          collateralTypeInfo: [
            [number, number, number, number, number, number],
            string,
            string,
            string,
            number,
            number,
            number,
            boolean
          ] & {
            modifiers: [number, number, number, number, number, number];
            primaryColor: string;
            secondaryColor: string;
            cheekColor: string;
            svgId: number;
            eyeShapeSvgId: number;
            conversionRate: number;
            delisted: boolean;
          };
        }
      ],
      {
        _collateralType: [
          string,
          [
            [number, number, number, number, number, number],
            string,
            string,
            string,
            number,
            number,
            number,
            boolean
          ] & {
            modifiers: [number, number, number, number, number, number];
            primaryColor: string;
            secondaryColor: string;
            cheekColor: string;
            svgId: number;
            eyeShapeSvgId: number;
            conversionRate: number;
            delisted: boolean;
          }
        ] & {
          collateralType: string;
          collateralTypeInfo: [
            [number, number, number, number, number, number],
            string,
            string,
            string,
            number,
            number,
            number,
            boolean
          ] & {
            modifiers: [number, number, number, number, number, number];
            primaryColor: string;
            secondaryColor: string;
            cheekColor: string;
            svgId: number;
            eyeShapeSvgId: number;
            conversionRate: number;
            delisted: boolean;
          };
        };
      }
    >;

    AddCollateralType(
      _collateralType?: null
    ): TypedEventFilter<
      [
        [
          string,
          [
            [number, number, number, number, number, number],
            string,
            string,
            string,
            number,
            number,
            number,
            boolean
          ] & {
            modifiers: [number, number, number, number, number, number];
            primaryColor: string;
            secondaryColor: string;
            cheekColor: string;
            svgId: number;
            eyeShapeSvgId: number;
            conversionRate: number;
            delisted: boolean;
          }
        ] & {
          collateralType: string;
          collateralTypeInfo: [
            [number, number, number, number, number, number],
            string,
            string,
            string,
            number,
            number,
            number,
            boolean
          ] & {
            modifiers: [number, number, number, number, number, number];
            primaryColor: string;
            secondaryColor: string;
            cheekColor: string;
            svgId: number;
            eyeShapeSvgId: number;
            conversionRate: number;
            delisted: boolean;
          };
        }
      ],
      {
        _collateralType: [
          string,
          [
            [number, number, number, number, number, number],
            string,
            string,
            string,
            number,
            number,
            number,
            boolean
          ] & {
            modifiers: [number, number, number, number, number, number];
            primaryColor: string;
            secondaryColor: string;
            cheekColor: string;
            svgId: number;
            eyeShapeSvgId: number;
            conversionRate: number;
            delisted: boolean;
          }
        ] & {
          collateralType: string;
          collateralTypeInfo: [
            [number, number, number, number, number, number],
            string,
            string,
            string,
            number,
            number,
            number,
            boolean
          ] & {
            modifiers: [number, number, number, number, number, number];
            primaryColor: string;
            secondaryColor: string;
            cheekColor: string;
            svgId: number;
            eyeShapeSvgId: number;
            conversionRate: number;
            delisted: boolean;
          };
        };
      }
    >;

    "AddItemType(tuple)"(
      _itemType?: null
    ): TypedEventFilter<
      [
        [
          string,
          string,
          string,
          [number, number, number, number, number, number],
          [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ],
          number[],
          [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number,
          boolean,
          number,
          boolean,
          number,
          number,
          number
        ] & {
          name: string;
          description: string;
          author: string;
          traitModifiers: [number, number, number, number, number, number];
          slotPositions: [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ];
          allowedCollaterals: number[];
          dimensions: [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          };
          ghstPrice: BigNumber;
          maxQuantity: BigNumber;
          totalQuantity: BigNumber;
          svgId: number;
          rarityScoreModifier: number;
          canPurchaseWithGhst: boolean;
          minLevel: number;
          canBeTransferred: boolean;
          category: number;
          kinshipBonus: number;
          experienceBonus: number;
        }
      ],
      {
        _itemType: [
          string,
          string,
          string,
          [number, number, number, number, number, number],
          [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ],
          number[],
          [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number,
          boolean,
          number,
          boolean,
          number,
          number,
          number
        ] & {
          name: string;
          description: string;
          author: string;
          traitModifiers: [number, number, number, number, number, number];
          slotPositions: [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ];
          allowedCollaterals: number[];
          dimensions: [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          };
          ghstPrice: BigNumber;
          maxQuantity: BigNumber;
          totalQuantity: BigNumber;
          svgId: number;
          rarityScoreModifier: number;
          canPurchaseWithGhst: boolean;
          minLevel: number;
          canBeTransferred: boolean;
          category: number;
          kinshipBonus: number;
          experienceBonus: number;
        };
      }
    >;

    AddItemType(
      _itemType?: null
    ): TypedEventFilter<
      [
        [
          string,
          string,
          string,
          [number, number, number, number, number, number],
          [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ],
          number[],
          [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number,
          boolean,
          number,
          boolean,
          number,
          number,
          number
        ] & {
          name: string;
          description: string;
          author: string;
          traitModifiers: [number, number, number, number, number, number];
          slotPositions: [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ];
          allowedCollaterals: number[];
          dimensions: [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          };
          ghstPrice: BigNumber;
          maxQuantity: BigNumber;
          totalQuantity: BigNumber;
          svgId: number;
          rarityScoreModifier: number;
          canPurchaseWithGhst: boolean;
          minLevel: number;
          canBeTransferred: boolean;
          category: number;
          kinshipBonus: number;
          experienceBonus: number;
        }
      ],
      {
        _itemType: [
          string,
          string,
          string,
          [number, number, number, number, number, number],
          [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ],
          number[],
          [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number,
          boolean,
          number,
          boolean,
          number,
          number,
          number
        ] & {
          name: string;
          description: string;
          author: string;
          traitModifiers: [number, number, number, number, number, number];
          slotPositions: [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ];
          allowedCollaterals: number[];
          dimensions: [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          };
          ghstPrice: BigNumber;
          maxQuantity: BigNumber;
          totalQuantity: BigNumber;
          svgId: number;
          rarityScoreModifier: number;
          canPurchaseWithGhst: boolean;
          minLevel: number;
          canBeTransferred: boolean;
          category: number;
          kinshipBonus: number;
          experienceBonus: number;
        };
      }
    >;

    "AddWearableSet(tuple)"(
      _wearableSet?: null
    ): TypedEventFilter<
      [
        [
          string,
          number[],
          number[],
          [number, number, number, number, number]
        ] & {
          name: string;
          allowedCollaterals: number[];
          wearableIds: number[];
          traitsBonuses: [number, number, number, number, number];
        }
      ],
      {
        _wearableSet: [
          string,
          number[],
          number[],
          [number, number, number, number, number]
        ] & {
          name: string;
          allowedCollaterals: number[];
          wearableIds: number[];
          traitsBonuses: [number, number, number, number, number];
        };
      }
    >;

    AddWearableSet(
      _wearableSet?: null
    ): TypedEventFilter<
      [
        [
          string,
          number[],
          number[],
          [number, number, number, number, number]
        ] & {
          name: string;
          allowedCollaterals: number[];
          wearableIds: number[];
          traitsBonuses: [number, number, number, number, number];
        }
      ],
      {
        _wearableSet: [
          string,
          number[],
          number[],
          [number, number, number, number, number]
        ] & {
          name: string;
          allowedCollaterals: number[];
          wearableIds: number[];
          traitsBonuses: [number, number, number, number, number];
        };
      }
    >;

    "CreateHaunt(uint256,uint256,uint256,bytes32)"(
      _hauntId?: BigNumberish | null,
      _hauntMaxSize?: null,
      _portalPrice?: null,
      _bodyColor?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string],
      {
        _hauntId: BigNumber;
        _hauntMaxSize: BigNumber;
        _portalPrice: BigNumber;
        _bodyColor: string;
      }
    >;

    CreateHaunt(
      _hauntId?: BigNumberish | null,
      _hauntMaxSize?: null,
      _portalPrice?: null,
      _bodyColor?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string],
      {
        _hauntId: BigNumber;
        _hauntMaxSize: BigNumber;
        _portalPrice: BigNumber;
        _bodyColor: string;
      }
    >;

    "DaoTransferred(address,address)"(
      previousDao?: string | null,
      newDao?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousDao: string; newDao: string }
    >;

    DaoTransferred(
      previousDao?: string | null,
      newDao?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousDao: string; newDao: string }
    >;

    "DaoTreasuryTransferred(address,address)"(
      previousDaoTreasury?: string | null,
      newDaoTreasury?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousDaoTreasury: string; newDaoTreasury: string }
    >;

    DaoTreasuryTransferred(
      previousDaoTreasury?: string | null,
      newDaoTreasury?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousDaoTreasury: string; newDaoTreasury: string }
    >;

    "ForgeTransferred(address,address)"(
      previousForge?: string | null,
      newForge?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousForge: string; newForge: string }
    >;

    ForgeTransferred(
      previousForge?: string | null,
      newForge?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousForge: string; newForge: string }
    >;

    "GameManagerAdded(address,uint256,uint256)"(
      gameManager_?: string | null,
      limit_?: BigNumberish | null,
      refreshTime_?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { gameManager_: string; limit_: BigNumber; refreshTime_: BigNumber }
    >;

    GameManagerAdded(
      gameManager_?: string | null,
      limit_?: BigNumberish | null,
      refreshTime_?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { gameManager_: string; limit_: BigNumber; refreshTime_: BigNumber }
    >;

    "GameManagerRemoved(address)"(
      gameManager_?: string | null
    ): TypedEventFilter<[string], { gameManager_: string }>;

    GameManagerRemoved(
      gameManager_?: string | null
    ): TypedEventFilter<[string], { gameManager_: string }>;

    "GrantExperience(uint256[],uint256[])"(
      _tokenIds?: null,
      _xpValues?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[]],
      { _tokenIds: BigNumber[]; _xpValues: BigNumber[] }
    >;

    GrantExperience(
      _tokenIds?: null,
      _xpValues?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[]],
      { _tokenIds: BigNumber[]; _xpValues: BigNumber[] }
    >;

    "ItemManagerAdded(address)"(
      newItemManager_?: string | null
    ): TypedEventFilter<[string], { newItemManager_: string }>;

    ItemManagerAdded(
      newItemManager_?: string | null
    ): TypedEventFilter<[string], { newItemManager_: string }>;

    "ItemManagerRemoved(address)"(
      itemManager_?: string | null
    ): TypedEventFilter<[string], { itemManager_: string }>;

    ItemManagerRemoved(
      itemManager_?: string | null
    ): TypedEventFilter<[string], { itemManager_: string }>;

    "ItemModifiersSet(uint256,int8[6],uint8)"(
      _wearableId?: null,
      _traitModifiers?: null,
      _rarityScoreModifier?: null
    ): TypedEventFilter<
      [BigNumber, [number, number, number, number, number, number], number],
      {
        _wearableId: BigNumber;
        _traitModifiers: [number, number, number, number, number, number];
        _rarityScoreModifier: number;
      }
    >;

    ItemModifiersSet(
      _wearableId?: null,
      _traitModifiers?: null,
      _rarityScoreModifier?: null
    ): TypedEventFilter<
      [BigNumber, [number, number, number, number, number, number], number],
      {
        _wearableId: BigNumber;
        _traitModifiers: [number, number, number, number, number, number];
        _rarityScoreModifier: number;
      }
    >;

    "ItemTypeMaxQuantity(uint256[],uint256[])"(
      _itemIds?: null,
      _maxQuanities?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[]],
      { _itemIds: BigNumber[]; _maxQuanities: BigNumber[] }
    >;

    ItemTypeMaxQuantity(
      _itemIds?: null,
      _maxQuanities?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[]],
      { _itemIds: BigNumber[]; _maxQuanities: BigNumber[] }
    >;

    "RemoveExperience(uint256[],uint256[])"(
      _tokenIds?: null,
      _xpValues?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[]],
      { _tokenIds: BigNumber[]; _xpValues: BigNumber[] }
    >;

    RemoveExperience(
      _tokenIds?: null,
      _xpValues?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[]],
      { _tokenIds: BigNumber[]; _xpValues: BigNumber[] }
    >;

    "UpdateCollateralModifiers(int16[6],int16[6])"(
      _oldModifiers?: null,
      _newModifiers?: null
    ): TypedEventFilter<
      [
        [number, number, number, number, number, number],
        [number, number, number, number, number, number]
      ],
      {
        _oldModifiers: [number, number, number, number, number, number];
        _newModifiers: [number, number, number, number, number, number];
      }
    >;

    UpdateCollateralModifiers(
      _oldModifiers?: null,
      _newModifiers?: null
    ): TypedEventFilter<
      [
        [number, number, number, number, number, number],
        [number, number, number, number, number, number]
      ],
      {
        _oldModifiers: [number, number, number, number, number, number];
        _newModifiers: [number, number, number, number, number, number];
      }
    >;

    "UpdateItemPrice(uint256,uint256)"(
      _itemId?: null,
      _priceInWei?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _itemId: BigNumber; _priceInWei: BigNumber }
    >;

    UpdateItemPrice(
      _itemId?: null,
      _priceInWei?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _itemId: BigNumber; _priceInWei: BigNumber }
    >;

    "UpdateItemType(uint256,tuple)"(
      _itemId?: BigNumberish | null,
      _itemType?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [
          string,
          string,
          string,
          [number, number, number, number, number, number],
          [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ],
          number[],
          [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number,
          boolean,
          number,
          boolean,
          number,
          number,
          number
        ] & {
          name: string;
          description: string;
          author: string;
          traitModifiers: [number, number, number, number, number, number];
          slotPositions: [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ];
          allowedCollaterals: number[];
          dimensions: [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          };
          ghstPrice: BigNumber;
          maxQuantity: BigNumber;
          totalQuantity: BigNumber;
          svgId: number;
          rarityScoreModifier: number;
          canPurchaseWithGhst: boolean;
          minLevel: number;
          canBeTransferred: boolean;
          category: number;
          kinshipBonus: number;
          experienceBonus: number;
        }
      ],
      {
        _itemId: BigNumber;
        _itemType: [
          string,
          string,
          string,
          [number, number, number, number, number, number],
          [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ],
          number[],
          [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number,
          boolean,
          number,
          boolean,
          number,
          number,
          number
        ] & {
          name: string;
          description: string;
          author: string;
          traitModifiers: [number, number, number, number, number, number];
          slotPositions: [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ];
          allowedCollaterals: number[];
          dimensions: [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          };
          ghstPrice: BigNumber;
          maxQuantity: BigNumber;
          totalQuantity: BigNumber;
          svgId: number;
          rarityScoreModifier: number;
          canPurchaseWithGhst: boolean;
          minLevel: number;
          canBeTransferred: boolean;
          category: number;
          kinshipBonus: number;
          experienceBonus: number;
        };
      }
    >;

    UpdateItemType(
      _itemId?: BigNumberish | null,
      _itemType?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [
          string,
          string,
          string,
          [number, number, number, number, number, number],
          [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ],
          number[],
          [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number,
          boolean,
          number,
          boolean,
          number,
          number,
          number
        ] & {
          name: string;
          description: string;
          author: string;
          traitModifiers: [number, number, number, number, number, number];
          slotPositions: [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ];
          allowedCollaterals: number[];
          dimensions: [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          };
          ghstPrice: BigNumber;
          maxQuantity: BigNumber;
          totalQuantity: BigNumber;
          svgId: number;
          rarityScoreModifier: number;
          canPurchaseWithGhst: boolean;
          minLevel: number;
          canBeTransferred: boolean;
          category: number;
          kinshipBonus: number;
          experienceBonus: number;
        }
      ],
      {
        _itemId: BigNumber;
        _itemType: [
          string,
          string,
          string,
          [number, number, number, number, number, number],
          [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ],
          number[],
          [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number,
          boolean,
          number,
          boolean,
          number,
          number,
          number
        ] & {
          name: string;
          description: string;
          author: string;
          traitModifiers: [number, number, number, number, number, number];
          slotPositions: [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ];
          allowedCollaterals: number[];
          dimensions: [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          };
          ghstPrice: BigNumber;
          maxQuantity: BigNumber;
          totalQuantity: BigNumber;
          svgId: number;
          rarityScoreModifier: number;
          canPurchaseWithGhst: boolean;
          minLevel: number;
          canBeTransferred: boolean;
          category: number;
          kinshipBonus: number;
          experienceBonus: number;
        };
      }
    >;

    "UpdateWearableSet(uint256,tuple)"(
      _setId?: null,
      _wearableSet?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [
          string,
          number[],
          number[],
          [number, number, number, number, number]
        ] & {
          name: string;
          allowedCollaterals: number[];
          wearableIds: number[];
          traitsBonuses: [number, number, number, number, number];
        }
      ],
      {
        _setId: BigNumber;
        _wearableSet: [
          string,
          number[],
          number[],
          [number, number, number, number, number]
        ] & {
          name: string;
          allowedCollaterals: number[];
          wearableIds: number[];
          traitsBonuses: [number, number, number, number, number];
        };
      }
    >;

    UpdateWearableSet(
      _setId?: null,
      _wearableSet?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [
          string,
          number[],
          number[],
          [number, number, number, number, number]
        ] & {
          name: string;
          allowedCollaterals: number[];
          wearableIds: number[];
          traitsBonuses: [number, number, number, number, number];
        }
      ],
      {
        _setId: BigNumber;
        _wearableSet: [
          string,
          number[],
          number[],
          [number, number, number, number, number]
        ] & {
          name: string;
          allowedCollaterals: number[];
          wearableIds: number[];
          traitsBonuses: [number, number, number, number, number];
        };
      }
    >;

    "WearableSlotPositionsSet(uint256,bool[16])"(
      _wearableId?: null,
      _slotPositions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ]
      ],
      {
        _wearableId: BigNumber;
        _slotPositions: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ];
      }
    >;

    WearableSlotPositionsSet(
      _wearableId?: null,
      _slotPositions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ]
      ],
      {
        _wearableId: BigNumber;
        _slotPositions: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ];
      }
    >;
  };

  estimateGas: {
    addCollateralTypes(
      _hauntId: BigNumberish,
      _collateralTypes: {
        collateralType: string;
        collateralTypeInfo: {
          modifiers: [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ];
          primaryColor: BytesLike;
          secondaryColor: BytesLike;
          cheekColor: BytesLike;
          svgId: BigNumberish;
          eyeShapeSvgId: BigNumberish;
          conversionRate: BigNumberish;
          delisted: boolean;
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addGameManagers(
      _newGameManagers: string[],
      _limits: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addItemManagers(
      _newItemManagers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addItemTypes(
      _itemTypes: {
        name: string;
        description: string;
        author: string;
        traitModifiers: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        slotPositions: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ];
        allowedCollaterals: BigNumberish[];
        dimensions: {
          x: BigNumberish;
          y: BigNumberish;
          width: BigNumberish;
          height: BigNumberish;
        };
        ghstPrice: BigNumberish;
        maxQuantity: BigNumberish;
        totalQuantity: BigNumberish;
        svgId: BigNumberish;
        rarityScoreModifier: BigNumberish;
        canPurchaseWithGhst: boolean;
        minLevel: BigNumberish;
        canBeTransferred: boolean;
        category: BigNumberish;
        kinshipBonus: BigNumberish;
        experienceBonus: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addItemTypesAndSvgs(
      _itemTypes: {
        name: string;
        description: string;
        author: string;
        traitModifiers: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        slotPositions: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ];
        allowedCollaterals: BigNumberish[];
        dimensions: {
          x: BigNumberish;
          y: BigNumberish;
          width: BigNumberish;
          height: BigNumberish;
        };
        ghstPrice: BigNumberish;
        maxQuantity: BigNumberish;
        totalQuantity: BigNumberish;
        svgId: BigNumberish;
        rarityScoreModifier: BigNumberish;
        canPurchaseWithGhst: boolean;
        minLevel: BigNumberish;
        canBeTransferred: boolean;
        category: BigNumberish;
        kinshipBonus: BigNumberish;
        experienceBonus: BigNumberish;
      }[],
      _svg: string,
      _typesAndSizes: { svgType: BytesLike; sizes: BigNumberish[] }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addWearableSets(
      _wearableSets: {
        name: string;
        allowedCollaterals: BigNumberish[];
        wearableIds: BigNumberish[];
        traitsBonuses: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchUpdateItemsPrice(
      _itemIds: BigNumberish[],
      _newPrices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createHaunt(
      _hauntMaxSize: BigNumberish,
      _portalPrice: BigNumberish,
      _bodyColor: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createHauntWithPayload(
      _payload: {
        _hauntMaxSize: BigNumberish;
        _portalPrice: BigNumberish;
        _bodyColor: BytesLike;
        _collateralTypes: {
          collateralType: string;
          collateralTypeInfo: {
            modifiers: [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ];
            primaryColor: BytesLike;
            secondaryColor: BytesLike;
            cheekColor: BytesLike;
            svgId: BigNumberish;
            eyeShapeSvgId: BigNumberish;
            conversionRate: BigNumberish;
            delisted: boolean;
          };
        }[];
        _collateralSvg: string;
        _collateralTypesAndSizes: {
          svgType: BytesLike;
          sizes: BigNumberish[];
        }[];
        _eyeShapeSvg: string;
        _eyeShapeTypesAndSizes: { svgType: BytesLike; sizes: BigNumberish[] }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gameManagerBalance(
      _manager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gameManagerRefreshTime(
      _manager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantExperience(
      _tokenIds: BigNumberish[],
      _xpValues: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isGameManager(
      _manager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintItems(
      _to: string,
      _itemIds: BigNumberish[],
      _quantities: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeExperience(
      _tokenIds: BigNumberish[],
      _xpValues: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeGameManagers(
      _gameManagers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeItemManagers(
      _itemManagers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDao(
      _newDao: string,
      _newDaoTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setForge(
      _newForge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setItemTraitModifiersAndRarityModifier(
      _wearableId: BigNumberish,
      _traitModifiers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _rarityScoreModifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWearableSlotPositions(
      _wearableId: BigNumberish,
      _slotPositions: [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCollateralModifiers(
      _collateralType: string,
      _modifiers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateItemTypeMaxQuantity(
      _itemIds: BigNumberish[],
      _maxQuantities: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateItemTypes(
      _indices: BigNumberish[],
      _itemTypes: {
        name: string;
        description: string;
        author: string;
        traitModifiers: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        slotPositions: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ];
        allowedCollaterals: BigNumberish[];
        dimensions: {
          x: BigNumberish;
          y: BigNumberish;
          width: BigNumberish;
          height: BigNumberish;
        };
        ghstPrice: BigNumberish;
        maxQuantity: BigNumberish;
        totalQuantity: BigNumberish;
        svgId: BigNumberish;
        rarityScoreModifier: BigNumberish;
        canPurchaseWithGhst: boolean;
        minLevel: BigNumberish;
        canBeTransferred: boolean;
        category: BigNumberish;
        kinshipBonus: BigNumberish;
        experienceBonus: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateWearableSets(
      _setIds: BigNumberish[],
      _wearableSets: {
        name: string;
        allowedCollaterals: BigNumberish[];
        wearableIds: BigNumberish[];
        traitsBonuses: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCollateralTypes(
      _hauntId: BigNumberish,
      _collateralTypes: {
        collateralType: string;
        collateralTypeInfo: {
          modifiers: [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
          ];
          primaryColor: BytesLike;
          secondaryColor: BytesLike;
          cheekColor: BytesLike;
          svgId: BigNumberish;
          eyeShapeSvgId: BigNumberish;
          conversionRate: BigNumberish;
          delisted: boolean;
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addGameManagers(
      _newGameManagers: string[],
      _limits: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addItemManagers(
      _newItemManagers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addItemTypes(
      _itemTypes: {
        name: string;
        description: string;
        author: string;
        traitModifiers: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        slotPositions: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ];
        allowedCollaterals: BigNumberish[];
        dimensions: {
          x: BigNumberish;
          y: BigNumberish;
          width: BigNumberish;
          height: BigNumberish;
        };
        ghstPrice: BigNumberish;
        maxQuantity: BigNumberish;
        totalQuantity: BigNumberish;
        svgId: BigNumberish;
        rarityScoreModifier: BigNumberish;
        canPurchaseWithGhst: boolean;
        minLevel: BigNumberish;
        canBeTransferred: boolean;
        category: BigNumberish;
        kinshipBonus: BigNumberish;
        experienceBonus: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addItemTypesAndSvgs(
      _itemTypes: {
        name: string;
        description: string;
        author: string;
        traitModifiers: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        slotPositions: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ];
        allowedCollaterals: BigNumberish[];
        dimensions: {
          x: BigNumberish;
          y: BigNumberish;
          width: BigNumberish;
          height: BigNumberish;
        };
        ghstPrice: BigNumberish;
        maxQuantity: BigNumberish;
        totalQuantity: BigNumberish;
        svgId: BigNumberish;
        rarityScoreModifier: BigNumberish;
        canPurchaseWithGhst: boolean;
        minLevel: BigNumberish;
        canBeTransferred: boolean;
        category: BigNumberish;
        kinshipBonus: BigNumberish;
        experienceBonus: BigNumberish;
      }[],
      _svg: string,
      _typesAndSizes: { svgType: BytesLike; sizes: BigNumberish[] }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addWearableSets(
      _wearableSets: {
        name: string;
        allowedCollaterals: BigNumberish[];
        wearableIds: BigNumberish[];
        traitsBonuses: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchUpdateItemsPrice(
      _itemIds: BigNumberish[],
      _newPrices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createHaunt(
      _hauntMaxSize: BigNumberish,
      _portalPrice: BigNumberish,
      _bodyColor: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createHauntWithPayload(
      _payload: {
        _hauntMaxSize: BigNumberish;
        _portalPrice: BigNumberish;
        _bodyColor: BytesLike;
        _collateralTypes: {
          collateralType: string;
          collateralTypeInfo: {
            modifiers: [
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish,
              BigNumberish
            ];
            primaryColor: BytesLike;
            secondaryColor: BytesLike;
            cheekColor: BytesLike;
            svgId: BigNumberish;
            eyeShapeSvgId: BigNumberish;
            conversionRate: BigNumberish;
            delisted: boolean;
          };
        }[];
        _collateralSvg: string;
        _collateralTypesAndSizes: {
          svgType: BytesLike;
          sizes: BigNumberish[];
        }[];
        _eyeShapeSvg: string;
        _eyeShapeTypesAndSizes: { svgType: BytesLike; sizes: BigNumberish[] }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gameManagerBalance(
      _manager: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gameManagerRefreshTime(
      _manager: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantExperience(
      _tokenIds: BigNumberish[],
      _xpValues: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isGameManager(
      _manager: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintItems(
      _to: string,
      _itemIds: BigNumberish[],
      _quantities: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeExperience(
      _tokenIds: BigNumberish[],
      _xpValues: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeGameManagers(
      _gameManagers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeItemManagers(
      _itemManagers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDao(
      _newDao: string,
      _newDaoTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setForge(
      _newForge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setItemTraitModifiersAndRarityModifier(
      _wearableId: BigNumberish,
      _traitModifiers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _rarityScoreModifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWearableSlotPositions(
      _wearableId: BigNumberish,
      _slotPositions: [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCollateralModifiers(
      _collateralType: string,
      _modifiers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateItemTypeMaxQuantity(
      _itemIds: BigNumberish[],
      _maxQuantities: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateItemTypes(
      _indices: BigNumberish[],
      _itemTypes: {
        name: string;
        description: string;
        author: string;
        traitModifiers: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        slotPositions: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ];
        allowedCollaterals: BigNumberish[];
        dimensions: {
          x: BigNumberish;
          y: BigNumberish;
          width: BigNumberish;
          height: BigNumberish;
        };
        ghstPrice: BigNumberish;
        maxQuantity: BigNumberish;
        totalQuantity: BigNumberish;
        svgId: BigNumberish;
        rarityScoreModifier: BigNumberish;
        canPurchaseWithGhst: boolean;
        minLevel: BigNumberish;
        canBeTransferred: boolean;
        category: BigNumberish;
        kinshipBonus: BigNumberish;
        experienceBonus: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateWearableSets(
      _setIds: BigNumberish[],
      _wearableSets: {
        name: string;
        allowedCollaterals: BigNumberish[];
        wearableIds: BigNumberish[];
        traitsBonuses: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
