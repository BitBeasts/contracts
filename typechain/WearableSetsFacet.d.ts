/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface WearableSetsFacetInterface extends ethers.utils.Interface {
  functions: {
    "findWearableSets(uint256[])": FunctionFragment;
    "getWearableSet(uint256)": FunctionFragment;
    "getWearableSets()": FunctionFragment;
    "totalWearableSets()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "findWearableSets",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getWearableSet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWearableSets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWearableSets",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "findWearableSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWearableSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWearableSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWearableSets",
    data: BytesLike
  ): Result;

  events: {};
}

export class WearableSetsFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WearableSetsFacetInterface;

  functions: {
    findWearableSets(
      _wearableIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { wearableSetIds_: BigNumber[] }>;

    getWearableSet(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          number[],
          number[],
          [number, number, number, number, number]
        ] & {
          name: string;
          allowedCollaterals: number[];
          wearableIds: number[];
          traitsBonuses: [number, number, number, number, number];
        }
      ] & {
        wearableSet_: [
          string,
          number[],
          number[],
          [number, number, number, number, number]
        ] & {
          name: string;
          allowedCollaterals: number[];
          wearableIds: number[];
          traitsBonuses: [number, number, number, number, number];
        };
      }
    >;

    getWearableSets(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          number[],
          number[],
          [number, number, number, number, number]
        ] & {
          name: string;
          allowedCollaterals: number[];
          wearableIds: number[];
          traitsBonuses: [number, number, number, number, number];
        })[]
      ] & {
        wearableSets_: ([
          string,
          number[],
          number[],
          [number, number, number, number, number]
        ] & {
          name: string;
          allowedCollaterals: number[];
          wearableIds: number[];
          traitsBonuses: [number, number, number, number, number];
        })[];
      }
    >;

    totalWearableSets(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  findWearableSets(
    _wearableIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getWearableSet(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, number[], number[], [number, number, number, number, number]] & {
      name: string;
      allowedCollaterals: number[];
      wearableIds: number[];
      traitsBonuses: [number, number, number, number, number];
    }
  >;

  getWearableSets(
    overrides?: CallOverrides
  ): Promise<
    ([string, number[], number[], [number, number, number, number, number]] & {
      name: string;
      allowedCollaterals: number[];
      wearableIds: number[];
      traitsBonuses: [number, number, number, number, number];
    })[]
  >;

  totalWearableSets(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    findWearableSets(
      _wearableIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getWearableSet(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number[], number[], [number, number, number, number, number]] & {
        name: string;
        allowedCollaterals: number[];
        wearableIds: number[];
        traitsBonuses: [number, number, number, number, number];
      }
    >;

    getWearableSets(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        number[],
        number[],
        [number, number, number, number, number]
      ] & {
        name: string;
        allowedCollaterals: number[];
        wearableIds: number[];
        traitsBonuses: [number, number, number, number, number];
      })[]
    >;

    totalWearableSets(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    findWearableSets(
      _wearableIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWearableSet(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWearableSets(overrides?: CallOverrides): Promise<BigNumber>;

    totalWearableSets(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    findWearableSets(
      _wearableIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWearableSet(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWearableSets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalWearableSets(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
