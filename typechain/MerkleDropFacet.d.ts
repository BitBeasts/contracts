/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MerkleDropFacetInterface extends ethers.utils.Interface {
  functions: {
    "batchDropClaimXPDrop(bytes32[],address[],uint256[][],bytes32[][],uint256[][])": FunctionFragment;
    "batchGotchiClaimXPDrop(bytes32,address[],uint256[][],bytes32[][],uint256[][])": FunctionFragment;
    "claimXPDrop(bytes32,address,uint256[],bytes32[],uint256[])": FunctionFragment;
    "createXPDrop(bytes32,bytes32,uint256)": FunctionFragment;
    "isClaimed(bytes32,uint256)": FunctionFragment;
    "viewXPDrop(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchDropClaimXPDrop",
    values: [
      BytesLike[],
      string[],
      BigNumberish[][],
      BytesLike[][],
      BigNumberish[][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchGotchiClaimXPDrop",
    values: [
      BytesLike,
      string[],
      BigNumberish[][],
      BytesLike[][],
      BigNumberish[][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimXPDrop",
    values: [BytesLike, string, BigNumberish[], BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createXPDrop",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimed",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewXPDrop",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchDropClaimXPDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchGotchiClaimXPDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimXPDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createXPDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "viewXPDrop", data: BytesLike): Result;

  events: {};
}

export class MerkleDropFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MerkleDropFacetInterface;

  functions: {
    batchDropClaimXPDrop(
      _propIds: BytesLike[],
      _claimers: string[],
      _gotchiIds: BigNumberish[][],
      _proofs: BytesLike[][],
      _onlyGotchis: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchGotchiClaimXPDrop(
      _propId: BytesLike,
      _claimers: string[],
      _gotchiIds: BigNumberish[][],
      _proofs: BytesLike[][],
      _onlyGotchis: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimXPDrop(
      _propId: BytesLike,
      _claimer: string,
      _gotchiId: BigNumberish[],
      _proof: BytesLike[],
      _onlyGotchis: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createXPDrop(
      _propId: BytesLike,
      _merkleRoot: BytesLike,
      _xpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isClaimed(
      _propId: BytesLike,
      _gotchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { claimed_: BigNumber }>;

    viewXPDrop(
      _propId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[[string, BigNumber] & { root: string; xpAmount: BigNumber }]>;
  };

  batchDropClaimXPDrop(
    _propIds: BytesLike[],
    _claimers: string[],
    _gotchiIds: BigNumberish[][],
    _proofs: BytesLike[][],
    _onlyGotchis: BigNumberish[][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchGotchiClaimXPDrop(
    _propId: BytesLike,
    _claimers: string[],
    _gotchiIds: BigNumberish[][],
    _proofs: BytesLike[][],
    _onlyGotchis: BigNumberish[][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimXPDrop(
    _propId: BytesLike,
    _claimer: string,
    _gotchiId: BigNumberish[],
    _proof: BytesLike[],
    _onlyGotchis: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createXPDrop(
    _propId: BytesLike,
    _merkleRoot: BytesLike,
    _xpAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isClaimed(
    _propId: BytesLike,
    _gotchId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  viewXPDrop(
    _propId: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { root: string; xpAmount: BigNumber }>;

  callStatic: {
    batchDropClaimXPDrop(
      _propIds: BytesLike[],
      _claimers: string[],
      _gotchiIds: BigNumberish[][],
      _proofs: BytesLike[][],
      _onlyGotchis: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<void>;

    batchGotchiClaimXPDrop(
      _propId: BytesLike,
      _claimers: string[],
      _gotchiIds: BigNumberish[][],
      _proofs: BytesLike[][],
      _onlyGotchis: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<void>;

    claimXPDrop(
      _propId: BytesLike,
      _claimer: string,
      _gotchiId: BigNumberish[],
      _proof: BytesLike[],
      _onlyGotchis: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    createXPDrop(
      _propId: BytesLike,
      _merkleRoot: BytesLike,
      _xpAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isClaimed(
      _propId: BytesLike,
      _gotchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewXPDrop(
      _propId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { root: string; xpAmount: BigNumber }>;
  };

  filters: {};

  estimateGas: {
    batchDropClaimXPDrop(
      _propIds: BytesLike[],
      _claimers: string[],
      _gotchiIds: BigNumberish[][],
      _proofs: BytesLike[][],
      _onlyGotchis: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchGotchiClaimXPDrop(
      _propId: BytesLike,
      _claimers: string[],
      _gotchiIds: BigNumberish[][],
      _proofs: BytesLike[][],
      _onlyGotchis: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimXPDrop(
      _propId: BytesLike,
      _claimer: string,
      _gotchiId: BigNumberish[],
      _proof: BytesLike[],
      _onlyGotchis: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createXPDrop(
      _propId: BytesLike,
      _merkleRoot: BytesLike,
      _xpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isClaimed(
      _propId: BytesLike,
      _gotchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewXPDrop(
      _propId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchDropClaimXPDrop(
      _propIds: BytesLike[],
      _claimers: string[],
      _gotchiIds: BigNumberish[][],
      _proofs: BytesLike[][],
      _onlyGotchis: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchGotchiClaimXPDrop(
      _propId: BytesLike,
      _claimers: string[],
      _gotchiIds: BigNumberish[][],
      _proofs: BytesLike[][],
      _onlyGotchis: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimXPDrop(
      _propId: BytesLike,
      _claimer: string,
      _gotchiId: BigNumberish[],
      _proof: BytesLike[],
      _onlyGotchis: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createXPDrop(
      _propId: BytesLike,
      _merkleRoot: BytesLike,
      _xpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isClaimed(
      _propId: BytesLike,
      _gotchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewXPDrop(
      _propId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
