/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LibXPAllocationInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "GrantExperience(uint256[],uint256[])": EventFragment;
    "XPClaimed(bytes32,uint256)": EventFragment;
    "XPDropCreated(bytes32,bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GrantExperience"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "XPClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "XPDropCreated"): EventFragment;
}

export type GrantExperienceEvent = TypedEvent<
  [BigNumber[], BigNumber[]] & {
    _tokenIds: BigNumber[];
    _xpValues: BigNumber[];
  }
>;

export type XPClaimedEvent = TypedEvent<
  [string, BigNumber] & { _propId: string; _gotchiId: BigNumber }
>;

export type XPDropCreatedEvent = TypedEvent<
  [string, string, BigNumber] & {
    _propId: string;
    _merkleRoot: string;
    _xpAmount: BigNumber;
  }
>;

export class LibXPAllocation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LibXPAllocationInterface;

  functions: {};

  callStatic: {};

  filters: {
    "GrantExperience(uint256[],uint256[])"(
      _tokenIds?: null,
      _xpValues?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[]],
      { _tokenIds: BigNumber[]; _xpValues: BigNumber[] }
    >;

    GrantExperience(
      _tokenIds?: null,
      _xpValues?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[]],
      { _tokenIds: BigNumber[]; _xpValues: BigNumber[] }
    >;

    "XPClaimed(bytes32,uint256)"(
      _propId?: BytesLike | null,
      _gotchiId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _propId: string; _gotchiId: BigNumber }
    >;

    XPClaimed(
      _propId?: BytesLike | null,
      _gotchiId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _propId: string; _gotchiId: BigNumber }
    >;

    "XPDropCreated(bytes32,bytes32,uint256)"(
      _propId?: BytesLike | null,
      _merkleRoot?: null,
      _xpAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _propId: string; _merkleRoot: string; _xpAmount: BigNumber }
    >;

    XPDropCreated(
      _propId?: BytesLike | null,
      _merkleRoot?: null,
      _xpAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _propId: string; _merkleRoot: string; _xpAmount: BigNumber }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
